# 2.3. Installation Steps {.unnumbered}
## 2.3.1. Initiating Your Raspberry Pi
### Step 1: Download the Pi Imager

Begin by downloading the Raspberry Pi Imager, a tool for installing the operating system on your Pi. This software is available on the [official Raspberry Pi website](https://www.raspberrypi.com/software/). Select the version compatible with your operating system (Windows, macOS, or Ubuntu) and install it on your computer.

### Step 2: Format your SD Card

Insert an SD card into your computer, then launch the Raspberry Pi Imager you just installed. Click `CHOOSE OS`, then select the `Erase` option followed by `Format SD Card`.

![](material/ch2/format_SD.mp4) 

### Step 3: Flash the OS onto your SD Card

Once your SD card is formatted, navigate back to the Raspberry Pi Imager main menu. Click `CHOOSE OS`, then select the Raspberry Pi OS version you wish to install. Afterward, select `CHOOSE SD CARD` and pick your SD card from the list.

Before you click `WRITE` to start the writing process, remember to enable `ssh` for remote access. You can do this by creating an empty file named `ssh` in the boot partition of the SD card. Also, set the username and password as 'pi' and 'raspberry' respectively in the settings.

::: {.callout-note}
The Raspberry Pi OS's default username and password are 'pi' and 'raspberry'. However, it's advisable to change these for security reasons once your system is up and running.
:::
  
![](material/ch2/write_SD.mp4)

### Step 4: Connect your Pi to your Laptop
With the Pi-equipped SD card, connect your Pi to your laptop using an Ethernet cable.

![](material/ch2/connect_pi.jpg) 

### Step 5: Enable Internet Connection Sharing

Navigate to your laptop's network settings and enable the `Internet Connection Sharing` option. This will allow your laptop to share its internet connection with the Raspberry Pi via the Ethernet cable, provided it's connected to the internet.

![](material/ch2/share-network.mp4)

### Step 6: Access Your Raspberry Pi via SSH

Having installed the Windows Terminal from the Microsoft Store, you can access the Command Prompt by pressing `Ctrl + R`, typing `cmd`, and hitting `Enter`. Alternatively, you can open it by pressing `Ctrl + Shift + P`. This is what you should see:
  
![](material/ch2/cmd_screen.png) 

To establish an SSH connection with your Raspberry Pi, enter the following command:
  
```bash
ssh pi@raspberrypi
```

By default, the password is 'raspberry'. Enter this default password when prompted.

![](material/ch2/access_cmd.mp4) 

### Step 7: Verify Your Pi's Internet Connectivity

To confirm your Raspberry Pi's internet connection, use the ping command followed by the IP address of a well-known site. For example, ping Google's Public DNS Server by typing this command:

```bash
ping 8.8.8.8
```

If the Pi is connected to the internet, you will see lines starting with '64 bytes from 8.8.8.8' and a summary of the ping at the end.

![](material/ch2/cmd_ping.mp4)

::: {.callout-note}
If you're using a **network with enhanced security**, such as a university network, you may need to register your Raspberry Pi's MAC address. The following figure is an example of what I did using my university network. If needed, consult your network administrator or IT support for the specific procedures of your network.

![Example of a Webpage Used to Register a MAC Address at a University](material/ch2/network_unist.png){width=500}

:::

## 2.3.2. Configuring Your Pi as a Wireless Sensor 

This step allows **your Pi to synchronize its system time** with the internet during boot. Since Raspberry Pi doesn't have a real-time clock to keep track of time when it's not powered on (more details [here](https://dayne.broderson.org/2020/03/12/the_time_is_now.html)), it must fetch the current time from the internet upon booting.

#### Step 1. Update Your Raspberry Pi OS

Start by updating your Raspberry Pi's operating system (OS) to its latest version. Open a terminal window and enter the following commands:
  
```bash
sudo apt-get update -y && sudo apt-get upgrade -y
```

::: {.callout-note}
In Linux systems, `sudo` stands for "superuser do", similar to "Run As Administrator" in Windows. The `-y` flag automatically confirms any prompts during the update process. The `apt-get update` command refreshes the list of available packages and their versions, while `apt-get upgrade` installs the latest versions. You can learn basic Linux commands on websites like [this](https://www.hostinger.com/tutorials/linux-commands).
:::

The given command should be placed like this:
  
![](material/ch2/update_ex.png)

After the updates are complete, restart your Raspberry Pi using this command:

```bash
sudo reboot
```

### Step 2. Set Up Your Mobile's Hotspot

We'll establish your mobile phone's hotspot as the network provider, which the Raspberry Pi will utilize for time synchronization. Set up your hotspot like this:

![](material/ch2/mobile_hotspot.png){width=500}

### Step 3. Edit the Pi's Network Configuration
Access the network configuration information by entering this command:

```bash
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
```

#### Step 4. Add Your Hotspot Information

Add the following details (in this case, *juhyeon9087* is used for both SSID and password of my mobile phone hotspot).

```powershell
country=GB
network={
  ssid="juhyeon9087"
  psk="juhyeon9087"
  key_mgmt=WPA-PSK
}
```

![](material/ch2/network_config.png) 

After updating the WiFi connection details, press `Ctrl + X`, then `Y`, followed by `Enter` to save the changes. Reboot your Raspberry Pi to implement the changes.

## 2.3.3. Transforming Your Pi into a File Server

This process allows **easy sharing of files between a Raspberry Pi and other devices,**  such as laptops and PCs. `Samba`, an open-source secure network file-sharing system, enables this transfer. By setting up Samba, files can be conveniently transferred to and from a laptop within your network to a Raspberry Pi, via a direct Ethernet connection.

### Step 1. Install Samba

Enter the following command in your terminal to install Samba:

```bash
sudo apt-get install samba samba-common-bin -y
```

### Step 2. Modify the Samba Config File

To share the Pi's folder, modify the Samba config file using the following command:
  
```bash
sudo nano /etc/samba/smb.conf
```

Move to the end line by pressing `Alt + /`  and add this:
  
```powershell
[share]
path = /home/pi
writeable=Yes
create mast=0777
directory mast=0777
public=no
```

![](material/ch2/samba-setting.png)

Press `Ctrl + X`, then `Y`, followed by `Enter` to save the changes.

### Step 3. Set Up a Samba User
Set up a user for your Samba share on your Pi using this command:
  
```bash
sudo smbpasswd -a pi
```

Then, enter the password twice as prompted by the command. In this case, the password is `raspberry`.

### Step 4. Restart Samba Services
Restart the Samba services to apply the changes by typing this:

```bash
sudo service smbd restart
```

```bash
sudo service nmbd restart
```

### Step 5. Access the Pi Directory

Open the File Explorer (press `Win + E`), type in the address `raspberrypi/pi`, then enter the Pi's name and password as network credentials.

![](material/ch2/samba_access.mp4) 

### Step 6. Create and Verify the Test File

Create a text file in your Pi's directory using the following command.

```bash
sudo nano test.txt
```

After typing anything (e.g., 'gg') in the file, press `Ctrl + x`, then `y`, followed by `Enter`. You should then be able to see the file on your laptop.

![](material/ch2/samba_check.mp4) 


## 2.3.4. Setting Up Cloud Storage Access on Your Pi

This step involves **configuring your Raspberry Pi to send status data to your cloud storage**. It's essential to ensure that your Pi is properly set up before or during its installation. Typically, you might consider connecting a monitor, mouse, and keyboard to your Pi to check its status, but that's not always practical or convenient. 

Instead, we recommend setting up your Pi to relay status updates - such as available storage space - to your chosen cloud storage. Once your Pi starts sending these updates, you can easily monitor its status by accessing and reviewing these files in the cloud storage. This method allows you to remotely track the setup progress and address any potential issues promptly.

### Step 1. Create a Dropbox App

In this guide, we will be utilizing Dropbox as our cloud storage service. You need to first set up an app on Dropbox to interface with the service. Follow the steps below:

1. Navigate to the [Dropbox developer page](https://www.dropbox.com/developers/).
2. Sign in or create an account if you haven't done so already.
3. Once you're logged in, proceed to create a new application.

![](material/ch2/dropbox_create.png) 
### Step 2. Modify the Permission

Configure your application to permit the viewing and management of files and folders. In this instance, we've selected all the available options in the permission settings.

![](material/ch2/dropbox_permission.png)

### Step 3. Install the Necessary Packages

Make sure that curl and git packages are installed on your Pi. You can do this by entering the following command:

```bash
sudo apt install curl git
```

### Step 4. Install the Dropbox Uploader

Download the [Dropbox Uploader script](https://github.com/andreafabrizi/Dropbox-Uploader/) onto your Pi using this command:

```bash
git clone https://github.com/andreafabrizi/Dropbox-Uploader.git
```

### Step 5. Assign Execution Permission

Move into the cloned directory and bestow the executable permission to the script by using these commands:

```bash
cd Dropbox-Uploader
```

```bash
sudo chmod +x dropbox_uploader.sh
```

### Step 6. Validate App Permissions on Your Pi

Begin the Dropbox Uploader configuration with the following command:

```bash
./dropbox_uploader.sh
```

Enter your app key and app secret in the terminal:
  
![](material/ch2/dropbox_register1.png) 

Copy and paste the given URL into a web browser, then click 'Continue' and 'Allow' to authorize the permissions.

![](material/ch2/dropbox_register2.png) 

Copy and paste the generated access code to the terminal.

![](material/ch2/dropbox_register3.png) 

### Step 7. Verify Cloud Storage Access

Employ the upload function to transmit a 'README.md' file by executing this command:

```bash
./dropbox_uploader.sh upload README.md /
```

You should be able to view the file that was sent by executing the command.

![](material/ch2/test_dropbox_upload.mp4) 

## 2.3.5. Software Setup

#### 2.3.5.1. Execute the Requirement.sh Script

Download the files [here](material/ch2/files.zip) and move them in to the Pi.

![](material/ch2/move_file_to_pi.png)

### Step 2. Running the requirement file

Run the `requirement.sh` file by typing this command:

```bash
./requirement.sh
```

This file is setup for installation:

- Update system packages.
- Install Python3, Pip3, libpcap, and Git.
- Install Python packages: pcapy and dpkt.
- Install Bluetooth library.
- Check for Bluelog directory, clone and install Bluelog if not present.

::: {.callout-note}

Dos2Unix is a package that includes dos2unix and unix2dos commands that allows to convert line endings in a text file from DOS/Windows to Unix/Linux and vice versa.
:::

## 2.3.6. Operation and Testing

### Step 1. Running the code

```bash
python3 start.py
```

#### 2.3.5.3. Set the Code to Run at Boot





### 2.3.6. Operation and Testing

#### 2.3.6.1. Test WiFi Monitors with Adapters
#### 2.3.6.2. Open the Generated File
