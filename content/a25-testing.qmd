# Testing and Validation

This section covers the step-by-step process of implementing and testing the Urban Sensing Service on your Raspberry Pi, both in a controlled environment *(6.1)* and in real-world scenarios *(6.2)*.

## Controlled Environment Testing

### Raspberry Pi Setup

Before setting up, power off the Raspberry Pi. Once turned off, insert the additional WiFi adapter. Afterward, power the Raspberry Pi back on.

![](material/ch2/pi_plugged.jpg)

Access the Raspberry Pi via ssh and check the wlan interface to check the internal wifi set to be wlan0 by excueting this:

```bash
ifconfig
```

Ensure that the `wlan0` interface is correctly assigned. The internal interface should have a MAC address starting with `b8:27:eb`. Subsequent WiFi adapters should follow a sequence like `wlan1`, `wlan2`, and so on.

![](material/ch2/ifconfig_wlan_check.png){width=50%}

If the assignment isn't correct, refer to Section 2.4 for the appropriate setup instructions.

### Script Execution

Easily access the superuser shell with:

```bash
sudo su
```


Initiate the Urban Sensing code:

```bash
python3 urban-sensing-raspi/code/start.py
```

Let it run for about 2 minutes before halting it using `Ctrl+C`.

![](material/ch2/run_script.mp4) 

### Customizing Your Sensing

The Urban Sensing Service isn't just about standard WiFi data collection; it offers a broader scope:

- **Retain Raw WiFi Packets** : Use the `-i` option:

  ```bash
  python3 urban-sensing-raspi/code/start.py -i
  ``` 

- **Introduce Bluetooth Sensing** : Add the `-b` option:

  ```bash
  python3 urban-sensing-raspi/code/start.py -b
  ``` 

- **Discover More Options** : Read our the [GitHub Repository](https://github.com/urbanjuhyeon/urban-sensing-raspi).

## Verifying the Results

**1. Access the Pi folder:** type `\\raspberrypi\share` on file explore.

**2. Look around 'stats' Folder** :

- Verify that file names reflect the exact execution time.
- Confirm files have been transferred to Dropbox Storage.

![](material/ch2/verify_result_1.mp4) 
 
**3. 'data' Folder** : 

- If you used `-b`, expect a Bluetooth file. Otherwise, it won't appear. 
- Check for the creation of the WiFi packet file. To delve deeper, use [DB Browser for SQLite](https://sqlitebrowser.org/).

![](material/ch2/verify_result_2.mp4) 

## Setting Up Sensing Service

Once you've validated the sensing outputs, you can finalize the settings to fit your objectives. Notably, this will allow your Raspberry Pi to initiate the sensing service upon booting up. 

Execute the following script:

```bash
bash urban-sensing-raspi/service.sh
```

Follow the on-screen prompts and ensure its proper functioning. Exit the status info using `ctrl+c`.

![](material/ch2/bash_service.mp4)

::: {.callout-note}

After running service.sh, your Raspberry Pi will start start.py on every boot. If you need to do tasks like file transfers, pause this service. The start.py has a 30-second delay at the start. If you stop the service within this time using `systemctl stop sensing.service`, the script won't perform any actions.

```bash
sudo systemctl stop sensing.service
```

:::

## Real-world Testing

In this section, we'll test the sensing service without Ethernet, simulating a real-world application. Follow these detailed steps for a successful setup and operation:

### Activating Mobile Hotspot

Activate the hotspot on your mobile device. This is essential for providing internet connectivity to the Raspberry Pi, which will enable time synchronization and status updates via Dropbox.

![](material/ch2/turnon_hotspot.jpg){width=50%}

### Connecting the External Battery

Ensure you've connected an external battery to power both your Raspberry Pi and the WiFi adapters.

![](material/ch2/plug_external.jpg)

### Monitoring WiFi Adapter Activity

Check for indicator lights on the WiFi adapter. In station mode, when the adapter is networking, the lights should turn on. You should also see the Raspberry Pi appear on your mobile hotspot interface. 

::: {.callout-note}

If the status lights remain off or the Raspberry Pi does not appear on your hotspot interface, there might be an issue with your adapter. Consider getting a replacement.

:::

![](material/ch2/adapter_light.jpg)

Observe the WiFi adapter's status lights. When networked (station mode), these should illuminate. Concurrently, you'll see the Raspberry Pi connect to your mobile hotspot interface.

![](material/ch2/check_hotspot.jpg){width=50%}

::: {.callout-note}

When accessing your Raspberry Pi via a mobile phone, the `raspberrypi` network might not disappear immediately. This is attributed to the `wlan0` interface. A Python script will disconnect and turn off the `wlan0` function approximately 3 minutes later.

:::


### Validating Dropbox Connectivity

Once connected to the network with the correct Dropbox settings, you should start seeing files from your Raspberry Pi appear in your Dropbox.

![](material/ch2/check_dropbox_upload.png)

### Checking WiFi Adapter Monitor Mode

In monitor mode, the WiFi adapter's status light should turn off, and its connection will vanish from your mobile hotspot interface.

![](material/ch2/plug_external.jpg)

![](material/ch2/check_hotspot_off.jpg){width=50%}

### Performing Sensing Operation

Throughout the designated sensing duration, the service will capture packets. To conclude the sensing operation, simply unplug the battery.

### Review Sensing Results

Use Ethernet or your mobile phone hotspot to access and review the generated sensing results, as same to the controlled enviroment testing.

![](material/ch2/final_check.mp4)










