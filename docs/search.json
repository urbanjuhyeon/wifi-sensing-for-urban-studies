[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Comprehensive Toolkit for WiFi Sensing: Decoding urban spaces",
    "section": "",
    "text": "Preface\nThis book is a dedicated resource for anyone interested in leveraging affordable, commercially available sensors to measure non-motorized traffic in urban environments.\nQuantifying non-motorized traffic—such as pedestrians and cyclists—plays a crucial role in urban studies. Understanding the flow and patterns of non-motorized traffic can inform urban planning strategies, enhance public safety, and contribute to the development of sustainable cities. Moreover, sensing technologies provide a robust and non-invasive method for capturing this vital information in real time, offering insights that traditional surveys or manual counts might miss.\nThe advent of the Internet-of-Things (IoT) has spurred a wave of urban sensing projects worldwide. Examples include the Array of Things (AoT) in Chicago, USA and S-DoT in Seoul, Korea, which utilize a network of sensors to gather a wide range of data.\nWith the increasing accessibility of DIY technologies, individuals now have the opportunity to engage with their urban environment in new and innovative ways. These tools democratize the field of urban sensing, previously the domain of expert scientists, by equipping anyone with the interest to build their own sensors.\nThis book is designed for those interested in understanding and monitoring non-motorized traffic. We provide comprehensive guidance on building your own urban DIY sensors for this purpose. With hands-on advice, practical examples, and detailed breakthroughs, our aim is to empower you with the skills and knowledge necessary to contribute to the rapidly evolving field of urban sensing."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "A Comprehensive Toolkit for WiFi Sensing: Decoding urban spaces",
    "section": "",
    "text": "Duives, D. C., van Oijen, T., & Hoogendoorn, S. P. (2020). Enhancing Crowd Monitoring System Functionality through Data Fusion: Estimating Flow Rate from Wi-Fi Traces and Automated Counting System Data. Sensors (Basel), 20(21). https://doi.org/10.3390/s20216032↩︎\nSoundararaj, B., Cheshire, J., & Longley, P. (2019). Estimating real-time high-street footfall from Wi-Fi probe requests. International Journal of Geographical Information Science, 34(2), 325-343,. https://doi.org/10.1080/13658816.2019.1587616↩︎\nZhou, Y., Lau, B. P. L., Koh, Z., Yuen, C., & Ng, B. K. K. (2020). Understanding Crowd Behaviors in a Social Event by Passive WiFi Sensing and Data Mining. IEEE internet of things journal, 1-1,. https://doi.org/10.1109/jiot.2020.2972062↩︎"
  },
  {
    "objectID": "content/a21-requirement.html#hardware-requirements",
    "href": "content/a21-requirement.html#hardware-requirements",
    "title": "2.1. Requirements",
    "section": "2.1.1. Hardware Requirements",
    "text": "2.1.1. Hardware Requirements\nThis is the hardware setup illustrating the necessary components required for Wi-Fi sensing:\n\nTo build up this WiFi sensor, you’ll need the following hardware:\n\n\n\nItem\nFunction\nRequirement\n\n\n\n\nLaptop and LAN cable\nAccessing and controlling the sensor\n\n\n\nRaspberry Pi board\nBuilding the sensor\nPi 3B/3B+ or a higher model Pi\n\n\nWiFi adapter\nCapturing WiFi packets\nCheck chipset compatibility for ‘monitoring mode’ (here)\n\n\nMicro SD card and adapter\nBuilding and storing data\nAt least 16 GB size\n\n\nEthernet cable\nConnecting the Pi to your laptop\n\n\n\nPortable power bank\nPowering the sensor in outdoor environments\nBattery capacity: +20,000 mAh (lasts one day in our setting)\n\n\nPi camera\nRecording the scene in front of the sensor"
  },
  {
    "objectID": "content/a21-requirement.html#software",
    "href": "content/a21-requirement.html#software",
    "title": "2.1. Requirements",
    "section": "2.1.2. Software",
    "text": "2.1.2. Software\nThis is a list of the main programs needed to build a Wi-Fi sensor and handle the sensor data. I will also provide the download link for each step later.\n\n\n\nItem\nFunction\nLink\n\n\n\n\nPuTTY\nTo access the Raspberry Pi remotely\nhere\n\n\nSQLite\nDatabase program to store sensor data\nhere\n\n\nRaspberry Pi Imager\nTool to write Raspberry Pi OS images onto SD cards\nhere"
  },
  {
    "objectID": "content/a21-requirement.html#skill-required",
    "href": "content/a21-requirement.html#skill-required",
    "title": "2.1. Requirements",
    "section": "2.1.3. Skill required",
    "text": "2.1.3. Skill required\nYou should have a basic understanding of programming, specifically in R and Python. You should be able to write, edit, and debug code. If you need to brush up on these skills or are just starting out, I recommend the following courses: Data Science: Foundations using R Specialization:\n\nData Science: Foundations using R Specialization: This course will help you build a strong foundation in data science using R.\nPython for Everybody Specialization: This course is a great introduction to programming in Python and covers the basics you’ll need for this project."
  },
  {
    "objectID": "content/a22-placement.html",
    "href": "content/a22-placement.html",
    "title": "Placement and Coverage Considerations",
    "section": "",
    "text": "Item\nFunction\nRequirement\n\n\n\n\nLaptop and LAN cable\nAccessing and controlling the sensor\n\n\n\nRaspberry Pi board\nBuilding the sensor\nPi 3B/3B+ or a higher model Pi\n\n\nWiFi adapter\nCapturing WiFi packets\nCheck chipset compatibility for ‘monitoring mode’ (here)\n\n\nMicro SD card and adapter\nBuilding and storing data\nAt least 16 GB size\n\n\nEthernet cable\nConnecting the Pi to your laptop\n\n\n\nPortable power bank\nPowering the sensor in outdoor environments\nBattery capacity: +20,000 mAh (lasts one day in our setting)\n\n\nPi camera\nRecording the scene in front of the sensor\n\n\n\n\n\nSoftware\n\n\n\nItem\nFunction\nLink\n\n\n\n\nPuTTY\nTo access the Pi by your laptop\nhere\n\n\nRaspberry Pi Imager\nTo build Raspberry Pi OS\nhere\n\n\nRaspberry Pi Imager\nTo build Raspberry Pi OS\nhere\n\n\n\n\n\nSkill\nLearning R and Python will be necessary for sensor building and data analysis. I recommend these classes: Data Science: Foundations using R Specialization and Python for Everybody Specialization"
  },
  {
    "objectID": "content/a23-installation.html#initiating-your-raspberry-pi",
    "href": "content/a23-installation.html#initiating-your-raspberry-pi",
    "title": "2.3. Installation Steps",
    "section": "2.3.1. Initiating Your Raspberry Pi",
    "text": "2.3.1. Initiating Your Raspberry Pi\n\nStep 1: Download the Pi Imager\nBegin by downloading the Raspberry Pi Imager, a tool for installing the operating system on your Pi. This software is available on the official Raspberry Pi website. Select the version compatible with your operating system (Windows, macOS, or Ubuntu) and install it on your computer.\n\n\nStep 2: Format your SD Card\nInsert an SD card into your computer, then launch the Raspberry Pi Imager you just installed. Click CHOOSE OS, then select the Erase option followed by Format SD Card.\nVideo\n\n\nStep 3: Flash the OS onto your SD Card\nOnce your SD card is formatted, navigate back to the Raspberry Pi Imager main menu. Click CHOOSE OS, then select the Raspberry Pi OS version you wish to install. Afterward, select CHOOSE SD CARD and pick your SD card from the list.\nBefore you click WRITE to start the writing process, remember to enable ssh for remote access. You can do this by creating an empty file named ssh in the boot partition of the SD card. Also, set the username and password as ‘pi’ and ‘raspberry’ respectively in the settings.\n\n\n\n\n\n\nNote\n\n\n\nThe Raspberry Pi OS’s default username and password are ‘pi’ and ‘raspberry’. However, it’s advisable to change these for security reasons once your system is up and running.\n\n\nVideo\n\n\nStep 4: Connect your Pi to your Laptop\nWith the Pi-equipped SD card, connect your Pi to your laptop using an Ethernet cable.\n\n\n\nStep 5: Enable Internet Connection Sharing\nNavigate to your laptop’s network settings and enable the Internet Connection Sharing option. This will allow your laptop to share its internet connection with the Raspberry Pi via the Ethernet cable, provided it’s connected to the internet.\nVideo\n\n\nStep 6: Access Your Raspberry Pi via SSH\nHaving installed the Windows Terminal from the Microsoft Store, you can access the Command Prompt by pressing Ctrl + R, typing cmd, and hitting Enter. Alternatively, you can open it by pressing Ctrl + Shift + P. This is what you should see:\n\nTo establish an SSH connection with your Raspberry Pi, enter the following command:\nssh pi@raspberrypi\nBy default, the password is ‘raspberry’. Enter this default password when prompted.\nVideo\n\n\nStep 7: Verify Your Pi’s Internet Connectivity\nTo confirm your Raspberry Pi’s internet connection, use the ping command followed by the IP address of a well-known site. For example, ping Google’s Public DNS Server by typing this command:\nping 8.8.8.8\nIf the Pi is connected to the internet, you will see lines starting with ‘64 bytes from 8.8.8.8’ and a summary of the ping at the end.\nVideo\n\n\n\n\n\n\nNote\n\n\n\nIf you’re using a network with enhanced security, such as a university network, you may need to register your Raspberry Pi’s MAC address. The following figure is an example of what I did using my university network. If needed, consult your network administrator or IT support for the specific procedures of your network.\n\n\n\nExample of a Webpage Used to Register a MAC Address at a University"
  },
  {
    "objectID": "content/a23-installation.html#configuring-your-pi-as-a-wireless-sensor",
    "href": "content/a23-installation.html#configuring-your-pi-as-a-wireless-sensor",
    "title": "2.3. Installation Steps",
    "section": "2.3.2. Configuring Your Pi as a Wireless Sensor",
    "text": "2.3.2. Configuring Your Pi as a Wireless Sensor\nThis step allows your Pi to synchronize its system time with the internet during boot. Since Raspberry Pi doesn’t have a real-time clock to keep track of time when it’s not powered on (more details here), it must fetch the current time from the internet upon booting.\n\nStep 1. Update Your Raspberry Pi OS\nStart by updating your Raspberry Pi’s operating system (OS) to its latest version. Open a terminal window and enter the following commands:\nsudo apt-get update -y && sudo apt-get upgrade -y\n\n\n\n\n\n\nNote\n\n\n\nIn Linux systems, sudo stands for “superuser do”, similar to “Run As Administrator” in Windows. The -y flag automatically confirms any prompts during the update process. The apt-get update command refreshes the list of available packages and their versions, while apt-get upgrade installs the latest versions. You can learn basic Linux commands on websites like this.\n\n\nThe given command should be placed like this:\n\nAfter the updates are complete, restart your Raspberry Pi using this command:\nsudo reboot\n\n\nStep 2. Set Up Your Mobile’s Hotspot\nWe’ll establish your mobile phone’s hotspot as the network provider, which the Raspberry Pi will utilize for time synchronization. Set up your hotspot like this:\n\n\n\nStep 3. Edit the Pi’s Network Configuration\nAccess the network configuration information by entering this command:\nsudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n\nStep 4. Add Your Hotspot Information\nAdd the following details (in this case, juhyeon9087 is used for both SSID and password of my mobile phone hotspot).\ncountry=GB\nnetwork={\n  ssid=\"juhyeon9087\"\n  psk=\"juhyeon9087\"\n  key_mgmt=WPA-PSK\n}\n\nAfter updating the WiFi connection details, press Ctrl + X, then Y, followed by Enter to save the changes. Reboot your Raspberry Pi to implement the changes."
  },
  {
    "objectID": "content/a23-installation.html#transforming-your-pi-into-a-file-server",
    "href": "content/a23-installation.html#transforming-your-pi-into-a-file-server",
    "title": "2.3. Installation Steps",
    "section": "2.3.3. Transforming Your Pi into a File Server",
    "text": "2.3.3. Transforming Your Pi into a File Server\nThis process allows easy sharing of files between a Raspberry Pi and other devices, such as laptops and PCs. Samba, an open-source secure network file-sharing system, enables this transfer. By setting up Samba, files can be conveniently transferred to and from a laptop within your network to a Raspberry Pi, via a direct Ethernet connection.\n\nStep 1. Install Samba\nEnter the following command in your terminal to install Samba:\nsudo apt-get install samba samba-common-bin -y\n\n\nStep 2. Modify the Samba Config File\nTo share the Pi’s folder, modify the Samba config file using the following command:\nsudo nano /etc/samba/smb.conf\nMove to the end line by pressing Alt + / and add this:\n[share]\npath = /home/pi\nwriteable=Yes\ncreate mast=0777\ndirectory mast=0777\npublic=no\n\nPress Ctrl + X, then Y, followed by Enter to save the changes.\n\n\nStep 3. Set Up a Samba User\nSet up a user for your Samba share on your Pi using this command:\nsudo smbpasswd -a pi\nThen, enter the password twice as prompted by the command. In this case, the password is raspberry.\n\n\nStep 4. Restart Samba Services\nRestart the Samba services to apply the changes by typing this:\nsudo service smbd restart\nsudo service nmbd restart\n\n\nStep 5. Access the Pi Directory\nOpen the File Explorer (press Win + E), type in the address raspberrypi/pi, then enter the Pi’s name and password as network credentials.\nVideo\n\n\nStep 6. Create and Verify the Test File\nCreate a text file in your Pi’s directory using the following command.\nsudo nano test.txt\nAfter typing anything (e.g., ‘gg’) in the file, press Ctrl + x, then y, followed by Enter. You should then be able to see the file on your laptop.\nVideo"
  },
  {
    "objectID": "content/a23-installation.html#setting-up-cloud-storage-access-on-your-pi",
    "href": "content/a23-installation.html#setting-up-cloud-storage-access-on-your-pi",
    "title": "2.3. Installation Steps",
    "section": "2.3.4. Setting Up Cloud Storage Access on Your Pi",
    "text": "2.3.4. Setting Up Cloud Storage Access on Your Pi\nThis step involves configuring your Raspberry Pi to send status data to your cloud storage. It’s essential to ensure that your Pi is properly set up before or during its installation. Typically, you might consider connecting a monitor, mouse, and keyboard to your Pi to check its status, but that’s not always practical or convenient.\nInstead, we recommend setting up your Pi to relay status updates - such as available storage space - to your chosen cloud storage. Once your Pi starts sending these updates, you can easily monitor its status by accessing and reviewing these files in the cloud storage. This method allows you to remotely track the setup progress and address any potential issues promptly.\n\nStep 1. Create a Dropbox App\nIn this guide, we will be utilizing Dropbox as our cloud storage service. You need to first set up an app on Dropbox to interface with the service. Follow the steps below:\n\nNavigate to the Dropbox developer page.\nSign in or create an account if you haven’t done so already.\nOnce you’re logged in, proceed to create a new application.\n\n ### Step 2. Modify the Permission\nConfigure your application to permit the viewing and management of files and folders. In this instance, we’ve selected all the available options in the permission settings.\n\n\n\nStep 3. Install the Necessary Packages\nMake sure that curl and git packages are installed on your Pi. You can do this by entering the following command:\nsudo apt install curl git\n\n\nStep 4. Install the Dropbox Uploader\nDownload the Dropbox Uploader script onto your Pi using this command:\ngit clone https://github.com/andreafabrizi/Dropbox-Uploader.git\n\n\nStep 5. Assign Execution Permission\nMove into the cloned directory and bestow the executable permission to the script by using these commands:\ncd Dropbox-Uploader\nsudo chmod +x dropbox_uploader.sh\n\n\nStep 6. Validate App Permissions on Your Pi\nBegin the Dropbox Uploader configuration with the following command:\n./dropbox_uploader.sh\nEnter your app key and app secret in the terminal:\n\nCopy and paste the given URL into a web browser, then click ‘Continue’ and ‘Allow’ to authorize the permissions.\n\nCopy and paste the generated access code to the terminal.\n\n\n\nStep 7. Verify Cloud Storage Access\nEmploy the upload function to transmit a ‘README.md’ file by executing this command:\n./dropbox_uploader.sh upload README.md /\nYou should be able to view the file that was sent by executing the command.\nVideo"
  },
  {
    "objectID": "content/a23-installation.html#software-setup",
    "href": "content/a23-installation.html#software-setup",
    "title": "2.3. Installation Steps",
    "section": "2.3.5. Software Setup",
    "text": "2.3.5. Software Setup\n\n2.3.5.1. Execute the Requirement.sh Script\nDownload the files here and move them in to the Pi.\n\n\n\nStep 2. Running the requirement file\nRun the requirement.sh file by typing this command:\n./requirement.sh\nThis file is setup for installation:\n\nUpdate system packages.\nInstall Python3, Pip3, libpcap, and Git.\nInstall Python packages: pcapy and dpkt.\nInstall Bluetooth library.\nCheck for Bluelog directory, clone and install Bluelog if not present.\n\n\n\n\n\n\n\nNote\n\n\n\nDos2Unix is a package that includes dos2unix and unix2dos commands that allows to convert line endings in a text file from DOS/Windows to Unix/Linux and vice versa."
  },
  {
    "objectID": "content/a23-installation.html#operation-and-testing",
    "href": "content/a23-installation.html#operation-and-testing",
    "title": "2.3. Installation Steps",
    "section": "2.3.6. Operation and Testing",
    "text": "2.3.6. Operation and Testing\n\nStep 1. Running the code\npython3 start.py\n\n2.3.5.3. Set the Code to Run at Boot\n\n\n\n2.3.6. Operation and Testing\n\n2.3.6.1. Test WiFi Monitors with Adapters\n\n\n2.3.6.2. Open the Generated File"
  }
]