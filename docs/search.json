[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Comprehensive Toolkit for WiFi Sensing: Decoding urban spaces",
    "section": "",
    "text": "Preface\nThis book is a dedicated resource for anyone interested in leveraging affordable, commercially available sensors to measure non-motorized traffic in urban environments.\nQuantifying non-motorized traffic—such as pedestrians and cyclists—plays a crucial role in urban studies. Understanding the flow and patterns of non-motorized traffic can inform urban planning strategies, enhance public safety, and contribute to the development of sustainable cities. Moreover, sensing technologies provide a robust and non-invasive method for capturing this vital information in real time, offering insights that traditional surveys or manual counts might miss.\nThe advent of the Internet-of-Things (IoT) has spurred a wave of urban sensing projects worldwide. Examples include the Array of Things (AoT) in Chicago, USA and S-DoT in Seoul, Korea, which utilize a network of sensors to gather a wide range of data.\nWith the increasing accessibility of DIY technologies, individuals now have the opportunity to engage with their urban environment in new and innovative ways. These tools democratize the field of urban sensing, previously the domain of expert scientists, by equipping anyone with the interest to build their own sensors.\nThis book is designed for those interested in understanding and monitoring non-motorized traffic. We provide comprehensive guidance on building your own urban DIY sensors for this purpose. With hands-on advice, practical examples, and detailed breakthroughs, our aim is to empower you with the skills and knowledge necessary to contribute to the rapidly evolving field of urban sensing."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "A Comprehensive Toolkit for WiFi Sensing: Decoding urban spaces",
    "section": "",
    "text": "Duives, D. C., van Oijen, T., & Hoogendoorn, S. P. (2020). Enhancing Crowd Monitoring System Functionality through Data Fusion: Estimating Flow Rate from Wi-Fi Traces and Automated Counting System Data. Sensors (Basel), 20(21). https://doi.org/10.3390/s20216032↩︎\nSoundararaj, B., Cheshire, J., & Longley, P. (2019). Estimating real-time high-street footfall from Wi-Fi probe requests. International Journal of Geographical Information Science, 34(2), 325-343,. https://doi.org/10.1080/13658816.2019.1587616↩︎\nZhou, Y., Lau, B. P. L., Koh, Z., Yuen, C., & Ng, B. K. K. (2020). Understanding Crowd Behaviors in a Social Event by Passive WiFi Sensing and Data Mining. IEEE internet of things journal, 1-1,. https://doi.org/10.1109/jiot.2020.2972062↩︎"
  },
  {
    "objectID": "content/a21-requirement.html#hardware-components",
    "href": "content/a21-requirement.html#hardware-components",
    "title": "2.1. Prerequisites",
    "section": "2.1.1. Hardware Components",
    "text": "2.1.1. Hardware Components\nThis is the hardware setup illustrating the necessary components required for WiFi sensing:\n\nThe required hardware components for this WiFi sensor include:\n\n\n\n\n\n\n\n\nHardware\nDescription\nSpecific Recommendation\n\n\n\n\nRaspberry Pi board\nCore of our sensor\nPi 3B/3B+ or higher\n\n\nWiFi adapter\nCaptures WiFi packets\nCheck chipset compatibility for ‘monitoring mode’\n\n\nMicro SD card and adapter\nFor system building and data storage\nAt least 16 GB\n\n\nLaptop and Ethernet cable\nFor accessing and controlling the sensor\n—\n\n\nPortable power bank\nPowers the sensor in outdoor environments\nBattery capacity: +20,000 mAh\n\n\n\nBesides these essentials, other hardware components may be attached to the sensor depending on your project requirements, such as:\n\nPi camera: This can be used to record the scene in front of the sensor.\nAir pollution sensor: If you want to monitor air quality in addition to WiFi sensing. Temperature and humidity sensor: Useful for environmental monitoring and adjusting sensor performance based on climatic changes.\nTemperature and humidity sensor: Useful for environmental monitoring and adjusting sensor performance based on climatic changes."
  },
  {
    "objectID": "content/a21-requirement.html#required-software",
    "href": "content/a21-requirement.html#required-software",
    "title": "2.1. Prerequisites",
    "section": "2.1.2 Required Software",
    "text": "2.1.2 Required Software\nThe key software programs necessary to build a WiFi sensor and manage the sensor data are:\n\n\n\nSoftware\nPurpose\nDownload Link\n\n\n\n\nRaspberry Pi Imager\nTool for writing Pi OS images onto SD cards\nLink\n\n\nDB Browser for SQLite\nTool for view database written as SQLlite (WiFi packet file type)\nLink\n\n\n\nFeel free to download these programs in advance. If needed, we will provide the download links again when each step requires these tools."
  },
  {
    "objectID": "content/a21-requirement.html#necessary-skills",
    "href": "content/a21-requirement.html#necessary-skills",
    "title": "2.1. Prerequisites",
    "section": "2.1.3. Necessary Skills",
    "text": "2.1.3. Necessary Skills\nBasic programming skills, specifically in R and Python, are required. You should be able to write, edit, and debug code. To improve these skills, consider the following courses:\n\nData Science: Foundations using R Specialization for a strong foundation in data science using R.\nPython for Everybody Specialization to learn programming basics in Python."
  },
  {
    "objectID": "content/a22-initial.html#setting-up-the-raspberry-pi-operating-system",
    "href": "content/a22-initial.html#setting-up-the-raspberry-pi-operating-system",
    "title": "2.2. Initial Setup",
    "section": "2.2.1. Setting Up the Raspberry Pi Operating System",
    "text": "2.2.1. Setting Up the Raspberry Pi Operating System\n\nStep 1: Download the Pi Imager\nBegin by downloading the Raspberry Pi Imager, a tool for installing the operating system on your Pi. This software is available on the official Raspberry Pi website. Select the version compatible with your operating system (Windows, macOS, or Ubuntu) and install it on your computer.\n\n\n\nStep 2: Format your SD Card\nInsert an SD card into your computer, then launch the Raspberry Pi Imager you just installed. Click CHOOSE OS, then select the Erase option followed by Format SD Card.\nVideo\n\n\nStep 3: Flash the OS onto your SD Card\nOnce your SD card is formatted, you can proceed to install the Raspberry Pi OS:\n\nOpen Raspberry Pi Imager : Navigate back to the Raspberry Pi Imager main menu.\nChoose the OS : Click CHOOSE OS and select the Raspberry Pi OS version you wish to install.\nChoose the SD Card : Select CHOOSE SD CARD and pick your SD card from the list.\nEnable SSH : This will allow remote access to the Raspberry Pi.\nSet Username and Password : The Raspberry Pi OS’s default username and password are ‘pi’ and ‘raspberry’. For security reasons, it’s advisable to change these once your system is up and running.\nConfigure Wireless LAN : This step allows you to connect with WiFi. For this project, you will use your mobile hotspot as a network provider. This will synchronize the Pi’s time at boot by connecting to the network. Please set this up using your mobile hotspot information.\nWrite the OS : Finally, click WRITE to start the writing process. This will flash the selected OS onto your SD card.\n\nPlease note that the exact steps for enabling SSH and configuring the WLAN might vary depending on the version of the Raspberry Pi OS and the Imager tool you are using. Refer to the specific documentation if you encounter any issues.\nVideo\nOnce the process is complete, your SD card will be ready, and you can insert it into the Raspberry Pi to boot up the new operating system.\n\n\n\n\n\n\nWhy Do We Use Our Mobile Hotspot for This Project?\n\n\n\n\n\nThe Raspberry Pi lacks a real-time clock, which means it can’t keep track of time when powered off. To fetch the current time when booting up, it needs access to the internet. More details on this can be found here.\nTo provide the necessary internet connection for time synchronization, we’ll use your mobile phone’s hotspot. By establishing this connection, the Raspberry Pi can easily access the current time, ensuring accurate system operation. Here’s how you can set up your hotspot:\n\nThis approach leverages your mobile phone’s data connection, creating a seamless integration between the Raspberry Pi and the internet, which is vital for the project’s success."
  },
  {
    "objectID": "content/a22-initial.html#choose-the-access-remotely-way",
    "href": "content/a22-initial.html#choose-the-access-remotely-way",
    "title": "2.2. Initial Setup",
    "section": "2.2.2. Choose the Access Remotely Way",
    "text": "2.2.2. Choose the Access Remotely Way\nChoosing the correct method for remote access depends on your specific setup and requirements. Below are the detailed instructions for both methods, allowing smooth access and control of the Raspberry Pi:\n\n\nWhen you use a desktop (without WLAN card) to use access and control the Pi, choose the (1) and follow the instructions in Section 2.2.4., Section 3.\nWhen you use a laptop (capable WLAN card) to use access and control the Pi, choose the (2) and follow the instructions in Section 2.2.5., Section 4."
  },
  {
    "objectID": "content/a22-initial.html#sec-way1",
    "href": "content/a22-initial.html#sec-way1",
    "title": "2.2. Initial Setup",
    "section": "2.2.3. Access Your Pi Using an Ethernet Cable",
    "text": "2.2.3. Access Your Pi Using an Ethernet Cable\n\nStep 1: Connect your Pi to your Laptop\nWith the Pi-equipped SD card, connect your Pi to your laptop using an Ethernet cable.\n\n\n\nStep 2: Enable Internet Connection Sharing\nNavigate to your laptop’s network settings and enable the Internet Connection Sharing option. This will allow your laptop to share its internet connection with the Raspberry Pi via the Ethernet cable, provided it’s connected to the internet.\nVideo\n\n\nStep 3: Access Your Raspberry Pi via SSH\nHaving installed the Windows Terminal from the Microsoft Store, you can access the Command Prompt by pressing Ctrl + R, typing cmd, and hitting Enter. Alternatively, you can open it by pressing Ctrl + Shift + P. This is what you should see:\n\nTo establish an SSH connection with your Raspberry Pi, enter the following command:\nssh pi@raspberrypi\nVideo"
  },
  {
    "objectID": "content/a22-initial.html#sec-way2",
    "href": "content/a22-initial.html#sec-way2",
    "title": "2.2. Initial Setup",
    "section": "2.2.4. Access Your Pi Using Your Phone as a Network Provider",
    "text": "2.2.4. Access Your Pi Using Your Phone as a Network Provider\n\nStep 1: Set Up Your Mobile Hotspot\nEnable your mobile hotspot with the same settings you used when flashing the SD card:\n\n\n\nStep 2: Power Up Your Pi\nInsert the prepared SD card into your Pi and plug in the power:\n\n\n\nStep 3: Connect Your Laptop to Your Mobile Hotspot\nConfigure your laptop’s WiFi to connect to the mobile hotspot:\n\n\n\nStep 3: Verify Connections in Your Mobile Hotspot Interface\nAfter waiting a few seconds, you should see two connected devices in your interface:\n1. raspberrypi: The Raspberry Pi - after waiting a few seconds, you should see the Raspberry Pi appear in your mobile hotspot interface.\n2. your laptop: Your laptop’s name, as it appears on the network.\n\n\nStep 4: Access Your Pi via SSH\nFirst, open the Command Prompt. If you have installed the Windows Terminal from the Microsoft Store, you can access the Command Prompt by pressing Ctrl + R, typing cmd, and hitting Enter. Alternatively, you can open it by pressing Ctrl + Shift + P. You should see the following:\n\nNow, establish an SSH connection with your Raspberry Pi by entering this command:\nssh pi@raspberrypi\nVideo"
  },
  {
    "objectID": "content/a22-initial.html#verify-your-pis-internet-connectivity",
    "href": "content/a22-initial.html#verify-your-pis-internet-connectivity",
    "title": "2.2. Initial Setup",
    "section": "2.2.5. Verify Your Pi’s Internet Connectivity",
    "text": "2.2.5. Verify Your Pi’s Internet Connectivity\nTo confirm your Raspberry Pi’s internet connection, use the ping command followed by the IP address of a well-known site. For example, ping Google’s Public DNS Server by typing this command:\nping 8.8.8.8\nIf the Pi is connected to the internet, you will see lines starting with ‘64 bytes from 8.8.8.8’ and a summary of the ping at the end.\nVideo\nYou can stop the ping process by pressing Ctrl + C.\n\n\n\n\n\n\nNote\n\n\n\nIf you’re using a network with enhanced security, such as a university network, you may need to register your Raspberry Pi’s MAC address. The following figure is an example of what I did using my university network. If needed, consult your network administrator or IT support for the specific procedures of your network."
  },
  {
    "objectID": "content/a22-initial.html#issues-of-initial-setup",
    "href": "content/a22-initial.html#issues-of-initial-setup",
    "title": "2.2. Initial Setup",
    "section": "2.2.6. Issues of initial setup",
    "text": "2.2.6. Issues of initial setup\n\n1. Locating Your Raspberry Pi’s IP Address using MAC Address\nIf you need to access your Pi with a specific IP address, especially when connected to multiple Pis, follow these guidelines:\n1. Open Command Prompt: Press the Windows key on your keyboard, type cmd and hit Enter.\n2. Execute the arp -a command: This command displays the IP and MAC addresses of devices on your network.\n3. Identify your Raspberry Pi: Raspberry Pi devices have MAC addresses that start with B8:27:EB:xx:xx:xx or DC:A6:32:xx:xx:xx. Find the device in the list with a physical address that starts with these characters - that’s your Raspberry Pi’s IP address.\nNote: These are the MAC address prefixes specific to Raspberry Pi Foundation devices. Your device’s MAC address may start with a different prefix.\nVideo\n\n\n2. ‘WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!’\nThis warning appears when the remote system has different identification than expected, such as after a system re-installation or SSH key change.\n\nYou can fix this error by removing the old key for the Raspberry Pi:\nssh-keygen -R raspberrypi\nAfterwards, try to re-establish the SSH connection."
  },
  {
    "objectID": "content/a23-advanced.html#prepare-your-raspberry-pi-os",
    "href": "content/a23-advanced.html#prepare-your-raspberry-pi-os",
    "title": "2.3. Raspberry Pi Setup",
    "section": "2.3.1. Prepare Your Raspberry Pi OS",
    "text": "2.3.1. Prepare Your Raspberry Pi OS\n\nStep 1: Update Your Pi\nStart by updating your Raspberry Pi’s operating system (OS) to its latest version. Open a terminal window and enter the following commands:\nsudo apt-get update -y && sudo apt-get upgrade -y\n\n\n\n\n\n\nHow to copy/paste in Linux terminal\n\n\n\n\n\nFor copy, you could click this icon to copy the command:\n\nFor paste, there are various ways; please visit this when Ctrl+V doesn’t work in the terminal.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn Linux systems, sudo stands for “superuser do”, similar to “Run As Administrator” in Windows. The -y flag automatically confirms any prompts during the update process. The apt-get update command refreshes the list of available packages and their versions, while apt-get upgrade installs the latest versions. You can learn basic Linux commands on websites like this.\n\n\nThe given command should be placed like this:\nVideo\nAfter the updates are complete, restart your Raspberry Pi using this command:\nsudo reboot\n\n\nStep 2: Update Your Pi\nBefore starting any kind of system-wide transformation, it’s important to have the necessary administrative privileges. On Raspberry Pi, you can enter the superuser mode (or root mode) by using the command:\nsudo su"
  },
  {
    "objectID": "content/a23-advanced.html#transforming-your-pi-into-a-file-server",
    "href": "content/a23-advanced.html#transforming-your-pi-into-a-file-server",
    "title": "2.3. Raspberry Pi Setup",
    "section": "2.3.2. Transforming Your Pi into a File Server",
    "text": "2.3.2. Transforming Your Pi into a File Server\nThis process allows easy sharing of files between a Raspberry Pi and other devices, such as laptops and PCs. Samba, an open-source secure network file-sharing system, enables this transfer. By setting up Samba, files can be conveniently transferred to and from a laptop within your network to a Raspberry Pi, via a direct Ethernet connection.\n\nStep 1. Install Samba\nEnter the following command in your terminal to install Samba:\nsudo apt-get install samba samba-common-bin -y\n\n\n\nStep 2. Modify the Samba Config File\nTo share the Pi’s folder, modify the Samba config file using the following command:\nsudo nano /etc/samba/smb.conf\nMove to the end line by pressing Alt + / and add this:\n[share]\npath = /home/pi\nwriteable=Yes\ncreate mast=0777\ndirectory mast=0777\npublic=no\n\nPress Ctrl + X, then Y, followed by Enter to save the changes.\n\n\nStep 3. Set Up a Samba User\nSet up a user for your Samba share on your Pi using this command:\nsudo smbpasswd -a pi\nThen, enter the password twice as prompted by the command. In this case, the password is raspberry.\n\n\nStep 4. Restart Samba Services\nRestart the Samba services to apply the changes by typing this:\nsudo service smbd restart\nsudo service nmbd restart\n\n\nStep 5. Access the Pi Directory\nOpen the File Explorer (press Win + E), type in the address raspberrypi/pi, then enter the Pi’s name and password as network credentials.\nVideo\n\n\nStep 6. Create and Verify the Test File\nCreate a text file in your Pi’s directory using the following command.\nsudo nano test.txt\nAfter typing anything (e.g., ‘gg’) in the file, press Ctrl + x, then y, followed by Enter. You should then be able to see the file on your laptop.\nVideo"
  },
  {
    "objectID": "content/a23-advanced.html#setting-up-cloud-storage-access-on-your-pi",
    "href": "content/a23-advanced.html#setting-up-cloud-storage-access-on-your-pi",
    "title": "2.3. Raspberry Pi Setup",
    "section": "2.3.3. Setting Up Cloud Storage Access on Your Pi",
    "text": "2.3.3. Setting Up Cloud Storage Access on Your Pi\nThis step involves configuring your Raspberry Pi to send status data to your cloud storage. It’s essential to ensure that your Pi is properly set up before or during its installation. Typically, you might consider connecting a monitor, mouse, and keyboard to your Pi to check its status, but that’s not always practical or convenient.\nInstead, we recommend setting up your Pi to relay status updates - such as available storage space - to your chosen cloud storage. Once your Pi starts sending these updates, you can easily monitor its status by accessing and reviewing these files in the cloud storage. This method allows you to remotely track the setup progress and address any potential issues promptly.\n\nStep 1. Create a Dropbox App\nIn this guide, we will be utilizing Dropbox as our cloud storage service. You need to first set up an app on Dropbox to interface with the service. Follow the steps below:\n\nNavigate to the Dropbox developer page.\nSign in or create an account if you haven’t done so already.\nOnce you’re logged in, proceed to create a new application.\n\n\n\n\nStep 2. Modify the Permission\nConfigure your application to permit the viewing and management of files and folders. In this instance, we’ve selected all the available options in the permission settings (for the indivisual scope).\n\n\n\nStep 3. Install the Necessary Packages\nSwitch to a superuser shell session by typing this command:\nsudo su\nMake sure that curl and git packages are installed on your Pi. You can do this by entering the following command:\nsudo apt install curl git -y\n\n\nStep 4. Install the Dropbox Uploader\nDownload the Dropbox Uploader script onto your Pi using this command:\ngit clone https://github.com/andreafabrizi/Dropbox-Uploader.git\n\n\nStep 5. Assign Execution Permission\nMove into the cloned directory and bestow the executable permission to the script by using these commands:\ncd Dropbox-Uploader\nsudo chmod +x dropbox_uploader.sh\n\n\nStep 6. Validate App Permissions on Your Pi\nBegin the Dropbox Uploader configuration with the following command:\n./dropbox_uploader.sh\nEnter your app key and app secret in the terminal:\n\nCopy and paste the given URL into a web browser, then click ‘Continue’ and ‘Allow’ to authorize the permissions.\n\nCopy and paste the generated access code to the terminal.\n\n\n\nStep 7. Verify Cloud Storage Access\nEmploy the upload function to transmit a ‘README.md’ file by executing this command:\n./dropbox_uploader.sh upload README.md /\nYou should be able to view the file that was sent by executing the command.\nVideo\nGo back to the home directory by executing the command:\ncd /home/pi"
  },
  {
    "objectID": "content/a24-software.html#retrieve-required-scripts",
    "href": "content/a24-software.html#retrieve-required-scripts",
    "title": "2.4. Software Setup",
    "section": "2.4.1. Retrieve Required Scripts",
    "text": "2.4.1. Retrieve Required Scripts\nTo set up the sensing service on your Raspberry Pi, you’ll need to access the scripts located in the urban-sensing-raspi GitHub repository.\nBefore you proceed, ensure that your current directory is /home/pi. If you’re in a different directory, use the following command to navigate to the correct location:\ncd /home/pi\nNext, download the repository by executing the following command:\ngit clone https://github.com/jhyeonpark/urban-sensing-raspi.git\n\n\nShort description of repository\nThis repository contains several files, which are briefly explained below:\n.\n├── install.sh\n├── configure.sh\n├── code\n│   ├── default\n│   │   └── start.py\n│   └── ... (additional directories/files as needed)\n└── README.md\n\ninstall.sh: This script automates the installation of the Urban Sensing Service. It handles tasks such as installing necessary system packages and Python libraries, setting up the Bluetooth logger, and conducting other initial setup tasks.\nconfigure.sh: This script manages the configuration of the Urban Sensing Service. It sets up udev rules for consistent network interface naming and creates a systemd service to run the sensing service automatically at boot.\nstart.py: Located in the ‘code/default’ directory, this Python script is the main program for the Urban Sensing Service. By default, it configures WiFi monitoring on three different channels, collects WiFi packet data, parses this data, and stores relevant information in a SQLite database. It also collects Bluetooth data."
  },
  {
    "objectID": "content/a24-software.html#install-necessary-packages",
    "href": "content/a24-software.html#install-necessary-packages",
    "title": "2.4. Software Setup",
    "section": "2.4.2. Install necessary packages",
    "text": "2.4.2. Install necessary packages\nOnce you download the repository, move your working directory to the repository with the following command:\ncd urban-sensing-raspi\nSwitch to a superuser shell session by typing this command:\nsudo su\nNext, run the install.sh script by executing this command:\nbash install.sh\nVideo"
  },
  {
    "objectID": "content/a24-software.html#configure-setting",
    "href": "content/a24-software.html#configure-setting",
    "title": "2.4. Software Setup",
    "section": "2.4.3. Configure setting",
    "text": "2.4.3. Configure setting\nrun the configure.sh script by executing this command:\nbash configure.sh\nOnce the installation script completes, proceed with the configure.sh script. This script sets up udev rules for consistent network interface naming and creates a systemd service to run the sensing service automatically at boot.\nRemember to start the service again when you’re ready to resume sensing operations."
  },
  {
    "objectID": "content/a25-imp.html#testing-the-sensing-service",
    "href": "content/a25-imp.html#testing-the-sensing-service",
    "title": "2.5. Implementation",
    "section": "2.5.1. Testing the Sensing Service",
    "text": "2.5.1. Testing the Sensing Service\n\nStep 1: Prepare the Environment\nBefore testing, ensure to restart your Raspberry Pi:\nsudo reboot\nAfter restarting your Pi, switch to a superuser shell session by typing this command:\nsudo su\nStop the Urban Sensing Service that automatically starts up due to configure.sh:\nsystemctl stop sensing.service\nVideo\n\n\n\n\n\n\nNote\n\n\n\nThe start.py script contains a time.sleep function, which introduces a 30-second delay after the system’s initialization to ensure stability. If the sensing service is manually interrupted within this window using systemctl stop sensing.service, the sensing operations and other processes encapsulated in start.py won’t be initiated.\n\n\n\n\nStep 2: Plug WiFi adapters on your Pi\nConnect a WIFI adapter capable of monitor mode to the Raspberry Pi as follows:\n\n\n\nStep 3: Run the script\nRun the Urban Sensing code using the following command:\npython3 urban-sensing-raspi/code/default/start.py\n2 minutes later, use the Ctrl+C to stop the code.\nVideo\n\n\nStep 3: Verify the Results\nTo stop the code, use the ctrl+C command.\nAfterward, verify the following:\n\nInspect the ‘stats’ folder:\n\n\nHas a file been generated?\nAre the files named correctly, incorporating the date and time when you executed the script?\nWere the files from the ‘stats’ folder successfully transferred to your Dropbox Storage?\n\nVideo\n\nLook through the ‘data’ folder:\n\n\nWas the Blueglog file generated?\nWas the WiFi packet file created? Open the sqlite file by DB Browser for SQLite\n\nVideo"
  },
  {
    "objectID": "content/a25-imp.html#test-the-sensing-service-in-real-world",
    "href": "content/a25-imp.html#test-the-sensing-service-in-real-world",
    "title": "2.5. Implementation",
    "section": "2.5.2. Test the Sensing Service in Real World",
    "text": "2.5.2. Test the Sensing Service in Real World\nIn this section, we’ll test the sensing service without ethernet, mimicking a real-world application. Follow these detailed steps for a successful setup and operation.\n\nStep 1. Activate Mobile Hotspot\nActivate the hotspot on your mobile device. It will provide internet connectivity to the Raspberry Pi, crucial for time synchronization and status updates via Dropbox.\n\n\n\nStep 2. Connect the External Battery\nAttach an external battery to power your Raspberry Pi and the WiFi adapters.\n\n\n\nStep 3. Monitor WiFi Adapter Activity\nCheck for indicator lights on the WiFi adapter. In station mode, when the adapter is networking, the lights should turn on. You should also see the Raspberry Pi appear on your mobile hotspot interface.\n\nObserve the WiFi adapter’s status lights. When networked (station mode), these should illuminate. Concurrently, you’ll see the Raspberry Pi connect to your mobile hotspot interface.\n\n\n\n\n\n\n\nNote\n\n\n\nIf the status lights remain off or no connections appear on your hotspot interface, the adapter may be faulty. Consider replacing it.\n\n\n\n\nStep 4. Validate Dropbox Connectivity\nWith a secure network connection and correct Dropbox settings, you’ll start seeing files from your Raspberry Pi in your Dropbox.\n\n\n\nStep 5. Check the WiFi adapter going on monitor mode\nIn monitor mode, the WiFi adapter’s status light will turn off\n\nIts connection will disappear from your mobile hotspot interface.\n\n\n\nStep 6. Wait for Sensing Operation\nDuring the designated sensing period, the service will collect WiFi and Bluetooth packets.\n\n\nStep 7. End Sensing Operation\nUnplug the battery to halt the sensing operation when you’re finished.\n\n\nStep 8. Review Sensing Results\nUse ethernet to access and review the generated sensing results, which include WiFi packet data and Bluetooth logs.\nVideo"
  },
  {
    "objectID": "content/a61-paper.html#recovering-a-malformed-sqlite3-database",
    "href": "content/a61-paper.html#recovering-a-malformed-sqlite3-database",
    "title": "5.1. Further Consideration",
    "section": "Recovering a Malformed SQLite3 Database",
    "text": "Recovering a Malformed SQLite3 Database\nAre you facing the “database disk image is malformed” error in SQLite3? This error indicates a corrupt database file, possibly due to an application crash, hardware failure, or programming error. This guide will walk you through the steps to recover as much data as possible from a corrupted SQLite3 database. ## Step 1: Update SQLite3 to the Latest Version {.unnumbered}\nTo begin, ensure you have a recent version of SQLite3 that supports the .recover command. Introduced in SQLite3 version 3.29.0 (released on 2019-07-10), this command aids in database recovery. Download the latest SQLite3 version from the official SQLite3 download page .\n\nDownload the sqlite3.exe file to the folder containing the malformed SQLite3 file."
  },
  {
    "objectID": "content/a61-paper.html#step-2-generate-a-sql-dump-with-the-.recover-command",
    "href": "content/a61-paper.html#step-2-generate-a-sql-dump-with-the-.recover-command",
    "title": "5.1. Further Consideration",
    "section": "Step 2: Generate a SQL Dump with the .recover Command",
    "text": "Step 2: Generate a SQL Dump with the .recover Command\nThe SQLite3 .recover command recovers as much data as possible from a corrupted database file. It parses the database file byte-by-byte and generates SQL commands to recreate the database.\nOpen the Command Prompt and navigate to the directory containing the corrupted SQLite3 file. Assuming C:\\Users\\UNIST\\Documents\\malf is the directory containing broken.sqlite3, the corrupted database, use the following command:\ncd C:\\Users\\UNIST\\Documents\\malf\nThen, use the .recover command as follows:\nsqlite3 broken.sqlite3\nsqlite&gt; .mode insert\nsqlite&gt; .output recover.sql\nsqlite&gt; .recover\nsqlite&gt; .exit\nThese commands generate a recover.sql file containing SQL commands to recreate the database."
  },
  {
    "objectID": "content/a61-paper.html#step-3-recreate-the-database-using-the-recovered-sql",
    "href": "content/a61-paper.html#step-3-recreate-the-database-using-the-recovered-sql",
    "title": "5.1. Further Consideration",
    "section": "Step 3: Recreate the Database Using the Recovered SQL",
    "text": "Step 3: Recreate the Database Using the Recovered SQL\nThe final step involves creating a new SQLite3 database using the SQL commands in recover.sql. Execute the following command:\nsqlite3 new_database.db &lt; recover.sql\nThis creates a new SQLite3 database named new_database.db using the SQL commands in recover.sql.\n\nNote: This method may not recover all your data, especially if the corruption is severe. Some rows or even entire tables might be missing or incomplete in the new database.\n\nWatch this video to understand the entire process:\nVideo"
  }
]