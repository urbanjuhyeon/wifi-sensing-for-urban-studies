[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Comprehensive Toolkit for WiFi Sensing: Decoding urban spaces",
    "section": "",
    "text": "Preface\nThis book is a dedicated resource for anyone interested in leveraging affordable, commercially available sensors to measure non-motorized traffic in urban environments.\nQuantifying non-motorized traffic—such as pedestrians and cyclists—plays a crucial role in urban studies. Understanding the flow and patterns of non-motorized traffic can inform urban planning strategies, enhance public safety, and contribute to the development of sustainable cities. Moreover, sensing technologies provide a robust and non-invasive method for capturing this vital information in real time, offering insights that traditional surveys or manual counts might miss.\nThe advent of the Internet-of-Things (IoT) has spurred a wave of urban sensing projects worldwide. Examples include the Array of Things (AoT) in Chicago, USA and S-DoT in Seoul, Korea, which utilize a network of sensors to gather a wide range of data.\nWith the increasing accessibility of DIY technologies, individuals now have the opportunity to engage with their urban environment in new and innovative ways. These tools democratize the field of urban sensing, previously the domain of expert scientists, by equipping anyone with the interest to build their own sensors.\nThis book is designed for those interested in understanding and monitoring non-motorized traffic. We provide comprehensive guidance on building your own urban DIY sensors for this purpose. With hands-on advice, practical examples, and detailed breakthroughs, our aim is to empower you with the skills and knowledge necessary to contribute to the rapidly evolving field of urban sensing."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "A Comprehensive Toolkit for WiFi Sensing: Decoding urban spaces",
    "section": "",
    "text": "Duives, D. C., van Oijen, T., & Hoogendoorn, S. P. (2020). Enhancing Crowd Monitoring System Functionality through Data Fusion: Estimating Flow Rate from Wi-Fi Traces and Automated Counting System Data. Sensors (Basel), 20(21). https://doi.org/10.3390/s20216032↩︎\nSoundararaj, B., Cheshire, J., & Longley, P. (2019). Estimating real-time high-street footfall from Wi-Fi probe requests. International Journal of Geographical Information Science, 34(2), 325-343,. https://doi.org/10.1080/13658816.2019.1587616↩︎\nZhou, Y., Lau, B. P. L., Koh, Z., Yuen, C., & Ng, B. K. K. (2020). Understanding Crowd Behaviors in a Social Event by Passive WiFi Sensing and Data Mining. IEEE internet of things journal, 1-1,. https://doi.org/10.1109/jiot.2020.2972062↩︎"
  },
  {
    "objectID": "content/a21-requirement.html#hardware-requirements",
    "href": "content/a21-requirement.html#hardware-requirements",
    "title": "2.1. Requirements",
    "section": "2.1.1. Hardware Requirements",
    "text": "2.1.1. Hardware Requirements\nThis is the hardware setup illustrating the necessary components required for Wi-Fi sensing:\n\nTo build up this WiFi sensor, you’ll need the following hardware:\n\n\n\nItem\nFunction\nRequirement\n\n\n\n\nLaptop and LAN cable\nAccessing and controlling the sensor\n\n\n\nRaspberry Pi board\nBuilding the sensor\nPi 3B/3B+ or a higher model Pi\n\n\nWiFi adapter\nCapturing WiFi packets\nCheck chipset compatibility for ‘monitoring mode’ (here)\n\n\nMicro SD card and adapter\nBuilding and storing data\nAt least 16 GB size\n\n\nEthernet cable\nConnecting the Pi to your laptop\n\n\n\nPortable power bank\nPowering the sensor in outdoor environments\nBattery capacity: +20,000 mAh (lasts one day in our setting)\n\n\nPi camera\nRecording the scene in front of the sensor"
  },
  {
    "objectID": "content/a21-requirement.html#software",
    "href": "content/a21-requirement.html#software",
    "title": "2.1. Requirements",
    "section": "2.1.2. Software",
    "text": "2.1.2. Software\nThis is a list of the main programs needed to build a Wi-Fi sensor and handle the sensor data. I will also provide the download link for each step later.\n\n\n\nItem\nFunction\nLink\n\n\n\n\nPuTTY\nTo access the Raspberry Pi remotely\nhere\n\n\nSQLite\nDatabase program to store sensor data\nhere\n\n\nRaspberry Pi Imager\nTool to write Raspberry Pi OS images onto SD cards\nhere"
  },
  {
    "objectID": "content/a21-requirement.html#skill-required",
    "href": "content/a21-requirement.html#skill-required",
    "title": "2.1. Requirements",
    "section": "2.1.3. Skill required",
    "text": "2.1.3. Skill required\nYou should have a basic understanding of programming, specifically in R and Python. You should be able to write, edit, and debug code. If you need to brush up on these skills or are just starting out, I recommend the following courses: Data Science: Foundations using R Specialization:\n\nData Science: Foundations using R Specialization: This course will help you build a strong foundation in data science using R.\nPython for Everybody Specialization: This course is a great introduction to programming in Python and covers the basics you’ll need for this project."
  },
  {
    "objectID": "content/a22-placement.html",
    "href": "content/a22-placement.html",
    "title": "Placement and Coverage Considerations",
    "section": "",
    "text": "Item\nFunction\nRequirement\n\n\n\n\nLaptop and LAN cable\nAccessing and controlling the sensor\n\n\n\nRaspberry Pi board\nBuilding the sensor\nPi 3B/3B+ or a higher model Pi\n\n\nWiFi adapter\nCapturing WiFi packets\nCheck chipset compatibility for ‘monitoring mode’ (here)\n\n\nMicro SD card and adapter\nBuilding and storing data\nAt least 16 GB size\n\n\nEthernet cable\nConnecting the Pi to your laptop\n\n\n\nPortable power bank\nPowering the sensor in outdoor environments\nBattery capacity: +20,000 mAh (lasts one day in our setting)\n\n\nPi camera\nRecording the scene in front of the sensor\n\n\n\n\n\nSoftware\n\n\n\nItem\nFunction\nLink\n\n\n\n\nPuTTY\nTo access the Pi by your laptop\nhere\n\n\nRaspberry Pi Imager\nTo build Raspberry Pi OS\nhere\n\n\nRaspberry Pi Imager\nTo build Raspberry Pi OS\nhere\n\n\n\n\n\nSkill\nLearning R and Python will be necessary for sensor building and data analysis. I recommend these classes: Data Science: Foundations using R Specialization and Python for Everybody Specialization"
  },
  {
    "objectID": "content/a23-installation.html#getting-started-with-pi",
    "href": "content/a23-installation.html#getting-started-with-pi",
    "title": "2.3. Installation steps",
    "section": "2.3.1. Getting started with Pi",
    "text": "2.3.1. Getting started with Pi\n\nStep 1: Install the Raspberry Pi’s OS on your SD card\nInsert your SD card into your laptop and launch the Raspberry Pi Imager and select the format option to prepare your SD card before the installation.\nVideo\n\n\nStep 2: Flash the Raspberry Pi OS onto your SD card.\nBefore initiating the writing process, make sure to enable ssh and set the username and password to ‘pi’ and ‘raspberry’ respectively in the settings.\n\n\n\n\n\n\nNote\n\n\n\nThe default username and password are ‘pi’ and ‘raspberry’ respectively for Raspberry Pi OS, but it’s always recommended to change these for security reasons once your system is set up.\n\n\nVideo\n\n\nStep 3: Activate the Internet Connection Sharing Option\nOn your laptop, navigate to the network settings and enable the internet connection sharing option. This action will allow your laptop, once connected to the internet, to share its internet connection with your Raspberry Pi via an Ethernet cable\nVideo\n\n\nStep 4: Connect the Pi and your laptop\nUse an Ethernet cable to connect your Pi to your laptop\n\n\n\nStep 5: Access the Pi remotely using PuTTY\nPuTTY is a free and open-source terminal emulator supporting SSH, which is a protocol available on Linux systems that allows you to execute commands on a remote machine - in this case, your Raspberry Pi. This method enables you to interact with your Raspberry Pi over an Ethernet cable, eliminating the need for a mouse and monitor.\nHere’s how to use PuTTY to remotely access your Raspberry Pi:\nPrerequisite: SSH should have been enabled during the Raspberry Pi OS installation process (refer to Step 2).\n1. Access your Pi: Open PuTTY: and in the window, enter raspberrypi.local as a host name of your Pi locally connected with your laptop.\n2. Click ‘Open’: If this is the first time you’re connecting to your Raspberry Pi from this computer, you’ll see a security alert. Accept it by clicking ‘Yes’.\n3. Type ID and password: A terminal window will open asking for your username and password. By default, the username is ‘pi’ and the password is ‘raspberry’. After entering these, you’ll have access to your Raspberry Pi’s command line.\nVideo\n\n\nStep 6: Verify Internet Connectivity of Your Raspberry Pi\nNow that you have remote access to your Raspberry Pi over the SSH session, it’s important to make sure that the Pi is connected to the internet. This can be checked easily using the ping command followed by the IP address of a well-known site.\n\nPing Google’s Public DNS Server. In the terminal window, type ping 8.8.8.8 and press enter.\nIf the Pi is connected to the internet, you will see lines starting with ‘64 bytes from 8.8.8.8’ and a summary of the ping at the end. This output shows that network packets are being sent to 8.8.8.8 and responses are being received.\n\nVideo\n\n\n\n\n\n\nNote\n\n\n\nIn some cases, such as when you’re connected to a network with enhanced security (for example, a university network), you might need to register your Raspberry Pi’s MAC address on a separate website before you can establish a PuTTY connection. Consult with your network administrator or IT support for the specific procedures of your network.\n\n\n\n\n\nStep 7: Additional considerations\nIf you have multiple Raspberry Pi devices connected to your network and you wish to SSH into a specific one, you can directly enter its IP address as the host name in PuTTY. Here’s how you can identify the IP address of a particular Raspberry Pi:\n\nOpen Command Prompt: Press the Windows key and type cmd. Press Enter to open the command prompt.\nList Network Devices: Type arp -a and press Enter to list all devices connected to your network.\nIdentify the Raspberry Pi’s IP Address: Find the IP address of your Raspberry Pi by checking the physical addresses in the list. Raspberry Pi devices have MAC addresses that start with either B8:27:EB:xx:xx:xx or DC:A6:32:xx:xx:xx.\n\nVideo\nAccessing Raspberry Pi on a Secured Network:"
  },
  {
    "objectID": "content/a23-installation.html#preparing-your-pi-for-sensing",
    "href": "content/a23-installation.html#preparing-your-pi-for-sensing",
    "title": "2.3. Installation steps",
    "section": "2.3.2. Preparing your Pi for sensing",
    "text": "2.3.2. Preparing your Pi for sensing\n\nStep 1: Update Your Raspberry Pi OS\nThe first thing you should do is update your Raspberry Pi’s operating system (OS) to the latest version. Open a terminal window and type the following commands:\nsudo apt-get update -y && sudo apt-get upgrade -y\nAfter your updates are finished, restart your Raspberry Pi with this command:\nsudo reboot\n\n\n\n\n\n\nNote\n\n\n\nThe sudo keyword means superuser do in Linux systems, analogous to Run As Administrator in Windows. The -y flag automatically affirms any prompts during the update process. The apt-get update command refreshes the available packages and their versions, while apt-get upgrade installs the latest versions.\n\n\n\n\nStep 2: Configure the Network Settings\nThis step ensures your Raspberry Pi can synchronize its system time with the internet at boot. Unlike your laptop, the Raspberry Pi does not have a real-time clock to keep track of the time when it’s not powered on (more details here). This means that your Pi needs to fetch the current time from the internet when it boots.\nHere’s how to configure the setting:\n1. Setting your mobile’s hotspot: Start by setting up your hotspot, which your Raspberry Pi will use to synchronize its time.\n 2. Edit the Pi’s network configuration: Type this commend.\nsudo nano /etc/wpa_supplicant/wpa_supplicant.conf    \n3. Put the information of your hotspot: Go to the bottom of the file and add this information below (to me, juhyeon9087 for both SSID and password of my mobile phone hotspot).\n\ncountry=GB\nnetwork={\n  ssid=\"juhyeon9087\"\n  psk=\"juhyeon9087\"\n  key_mgmt=WPA-PSK\n}\n4. Close the terminal: After modifying the Wi-Fi connection details, press Ctrl + X and then press Y followed by Enter to save the changes. After rebooting your Raspberry Pi, the changes should take effect.\n\n\nStep 3: Set up a file server on your Pi\nThis process creates Samba shares in Linux on your Pi to back up and share contents from your laptop, anywhere on the network. The Samba is the Server Message Block (SMB) protocol for transferring data between a client and a server. With the Samba activated, we can conveniently copy files from/to a laptop on your network to a Pi using the direct Ethernet connection.\n1. Install Samba: Type the following command in your terminal to install Samba.\nsudo apt-get install samba samba-common-bin -y\n2. Modify the Samba Config File: Share the folder of your Pi by modifying the Samba config file using the following command:\nsudo nano /etc/samba/smb.conf\n3. Edit the File: Jump to the end of the file by pressing Ctrl + w and Ctrl + v and type this:\n[share]\npath = /home/pi\nwriteable=Yes\ncreate mast=0777\ndirectory mast=0777\npublic=no\nSave it by pressing Ctrl + x then y followed by Enter.\n4. Set up a Samba User: Set up a user for our Samba share on your Pi by typing this command:\nsudo smbpasswd -a pi\nAfterwards, enter the password twice as prompted by the command.\n5. Restart Samba Services: Now restart the Samba services to make the changes effective.\nsudo service smbd restart\nsudo service nmbd restart\n6. Test: Before checking the connection, create a text file by typing the following command:\nsudo nano test.txt\nAfter typing anything in the file press Ctrl + x then y followed by Enter.\n7. Connect to Pi on Windows: To connect to the Pi on Windows, open the File Explorer (press Win + E) and type raspberrypi/pi within the folder textbox.\n\n\nCheck the File: Finally, you can see the \\home\\pi\\test.txt file."
  }
]