[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sensing Urban Dynamics with WiFi: A Practical Guide",
    "section": "",
    "text": "Preface\nThis book is a dedicated resource for anyone interested in leveraging affordable, commercially available sensors to measure non-motorized traffic in urban environments.\nQuantifying non-motorized traffic—such as pedestrians and cyclists—plays a crucial role in urban studies. Understanding the flow and patterns of non-motorized traffic can inform urban planning strategies, enhance public safety, and contribute to the development of sustainable cities. Moreover, sensing technologies provide a robust and non-invasive method for capturing this vital information in real time, offering insights that traditional surveys or manual counts might miss.\nThe advent of the Internet-of-Things (IoT) has spurred a wave of urban sensing projects worldwide. Examples include the Array of Things (AoT) in Chicago, USA and S-DoT in Seoul, Korea, which utilize a network of sensors to gather a wide range of data.\nWith the increasing accessibility of DIY technologies, individuals now have the opportunity to engage with their urban environment in new and innovative ways. These tools democratize the field of urban sensing, previously the domain of expert scientists, by equipping anyone with the interest to build their own sensors.\nThis book is designed for those interested in understanding and monitoring non-motorized traffic. We provide comprehensive guidance on building your own urban DIY sensors for this purpose. With hands-on advice, practical examples, and detailed breakthroughs, our aim is to empower you with the skills and knowledge necessary to contribute to the rapidly evolving field of urban sensing."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Sensing Urban Dynamics with WiFi: A Practical Guide",
    "section": "",
    "text": "Duives, D. C., van Oijen, T., & Hoogendoorn, S. P. (2020). Enhancing Crowd Monitoring System Functionality through Data Fusion: Estimating Flow Rate from Wi-Fi Traces and Automated Counting System Data. Sensors (Basel), 20(21). https://doi.org/10.3390/s20216032↩︎\nSoundararaj, B., Cheshire, J., & Longley, P. (2019). Estimating real-time high-street footfall from Wi-Fi probe requests. International Journal of Geographical Information Science, 34(2), 325-343,. https://doi.org/10.1080/13658816.2019.1587616↩︎\nZhou, Y., Lau, B. P. L., Koh, Z., Yuen, C., & Ng, B. K. K. (2020). Understanding Crowd Behaviors in a Social Event by Passive WiFi Sensing and Data Mining. IEEE internet of things journal, 1-1,. https://doi.org/10.1109/jiot.2020.2972062↩︎"
  },
  {
    "objectID": "content/a21-prerequisites.html#hardware-components",
    "href": "content/a21-prerequisites.html#hardware-components",
    "title": "1  Prerequisites",
    "section": "1.1 Hardware Components",
    "text": "1.1 Hardware Components\nThis is the hardware setup illustrating the necessary components required for WiFi sensing:\n\nThe required hardware components for this WiFi sensor include:\n\n\n\n\n\n\n\n\nHardware\nDescription\nSpecific Recommendation\n\n\n\n\nRaspberry Pi board\nCore of our sensor\nPi 3B/3B+ or higher\n\n\nWiFi adapter\nCaptures WiFi packets\nCheck chipset compatibility for ‘monitoring mode’\n\n\nMicro SD card and adapter\nFor system building and data storage\nAt least 16 GB\n\n\nLaptop and Ethernet cable\nFor accessing and controlling the sensor\n—\n\n\nPortable power bank\nPowers the sensor in outdoor environments\nBattery capacity: +20,000 mAh\n\n\n\nBesides these essentials, other hardware components may be attached to the sensor depending on your project requirements, such as:\n\nPi camera: This can be used to record the scene in front of the sensor.\nAir pollution sensor: If you want to monitor air quality in addition to WiFi sensing. Temperature and humidity sensor: Useful for environmental monitoring and adjusting sensor performance based on climatic changes.\nTemperature and humidity sensor: Useful for environmental monitoring and adjusting sensor performance based on climatic changes."
  },
  {
    "objectID": "content/a21-prerequisites.html#required-software",
    "href": "content/a21-prerequisites.html#required-software",
    "title": "1  Prerequisites",
    "section": "1.2 Required Software",
    "text": "1.2 Required Software\nThe key software programs necessary to build a WiFi sensor and manage the sensor data are:\n\n\n\nSoftware\nPurpose\nDownload Link\n\n\n\n\nRaspberry Pi Imager\nTool for writing Pi OS images onto SD cards\nLink\n\n\nDB Browser for SQLite\nTool for view database written as SQLlite (WiFi packet file type)\nLink\n\n\n\nFeel free to download these programs in advance. If needed, we will provide the download links again when each step requires these tools."
  },
  {
    "objectID": "content/a21-prerequisites.html#necessary-skills",
    "href": "content/a21-prerequisites.html#necessary-skills",
    "title": "1  Prerequisites",
    "section": "1.3 Necessary Skills",
    "text": "1.3 Necessary Skills\nBasic programming skills, specifically in R and Python, are required. You should be able to write, edit, and debug code. To improve these skills, consider the following courses:\n\nData Science: Foundations using R Specialization for a strong foundation in data science using R.\nPython for Everybody Specialization to learn programming basics in Python."
  },
  {
    "objectID": "content/a22-initial.html#setting-up-the-raspberry-pi-operating-system",
    "href": "content/a22-initial.html#setting-up-the-raspberry-pi-operating-system",
    "title": "2  Initial Setup",
    "section": "2.1 Setting Up the Raspberry Pi Operating System",
    "text": "2.1 Setting Up the Raspberry Pi Operating System\n\n2.1.1 Download the Pi Imager\nBegin by downloading the Raspberry Pi Imager, a tool for installing the operating system on your Pi. This software is available on the official Raspberry Pi website. Select the version compatible with your operating system (Windows, macOS, or Ubuntu) and install it on your computer.\n\n\n\n2.1.2 Format your SD Card\nInsert an SD card into your computer, then launch the Raspberry Pi Imager you just installed. Click CHOOSE OS, then select the Erase option followed by Format SD Card.\nVideo\n\n\n2.1.3 Flash the OS onto your SD Card\nOnce your SD card is formatted, you can proceed to install the Raspberry Pi OS:\n\nOpen Raspberry Pi Imager : Navigate back to the Raspberry Pi Imager main menu.\nChoose the OS : Click CHOOSE OS and select the Raspberry Pi OS version you wish to install.\nChoose the SD Card : Select CHOOSE SD CARD and pick your SD card from the list.\nEnable SSH : This will allow remote access to the Raspberry Pi.\nSet Username and Password : The Raspberry Pi OS’s default username and password are ‘pi’ and ‘raspberry’. For security reasons, it’s advisable to change these once your system is up and running.\nConfigure Wireless LAN : This step allows you to connect with WiFi. For this project, you will use your mobile hotspot as a network provider. This will synchronize the Pi’s time at boot by connecting to the network. Please set this up using your mobile hotspot information.\nWrite the OS : Finally, click WRITE to start the writing process. This will flash the selected OS onto your SD card.\n\nPlease note that the exact steps for enabling SSH and configuring the WLAN might vary depending on the version of the Raspberry Pi OS and the Imager tool you are using. Refer to the specific documentation if you encounter any issues.\nVideo\nOnce the process is complete, your SD card will be ready, and you can insert it into the Raspberry Pi to boot up the new operating system.\n\n\n\n\n\n\nWhy Do We Use Our Mobile Hotspot for This Project?\n\n\n\n\n\nThe Raspberry Pi lacks a real-time clock, which means it can’t keep track of time when powered off. To fetch the current time when booting up, it needs access to the internet. More details on this can be found here.\nTo provide the necessary internet connection for time synchronization, we’ll use your mobile phone’s hotspot. By establishing this connection, the Raspberry Pi can easily access the current time, ensuring accurate system operation. Here’s how you can set up your hotspot:\n\nThis approach leverages your mobile phone’s data connection, creating a seamless integration between the Raspberry Pi and the internet, which is vital for the project’s success."
  },
  {
    "objectID": "content/a22-initial.html#choose-the-access-remotely-way",
    "href": "content/a22-initial.html#choose-the-access-remotely-way",
    "title": "2  Initial Setup",
    "section": "2.2 Choose the Access Remotely Way",
    "text": "2.2 Choose the Access Remotely Way\nChoosing the correct method for remote access depends on your specific setup and requirements. Below are the detailed instructions for both methods, allowing smooth access and control of the Raspberry Pi:\n\n\nWhen you use a desktop (without WLAN card) to use access and control the Pi, choose the (1) and follow the instructions in Section 2.2.4., Section 2.3.\nWhen you use a laptop (capable WLAN card) to use access and control the Pi, choose the (2) and follow the instructions in Section 2.2.5., Section 2.4."
  },
  {
    "objectID": "content/a22-initial.html#sec-way1",
    "href": "content/a22-initial.html#sec-way1",
    "title": "2  Initial Setup",
    "section": "2.3 Access Your Pi Using an Ethernet Cable",
    "text": "2.3 Access Your Pi Using an Ethernet Cable\n\n2.3.1 Connect your Pi to your Laptop\nWith the Pi-equipped SD card, connect your Pi to your laptop using an Ethernet cable.\n\n\n\n2.3.2 Enable Internet Connection Sharing\nNavigate to your laptop’s network settings and enable the Internet Connection Sharing option. This will allow your laptop to share its internet connection with the Raspberry Pi via the Ethernet cable, provided it’s connected to the internet.\nVideo\n\n\n2.3.3 Access Your Raspberry Pi via SSH\nHaving installed the Windows Terminal from the Microsoft Store, you can access the Command Prompt by pressing Ctrl + R, typing cmd, and hitting Enter. Alternatively, you can open it by pressing Ctrl + Shift + P. This is what you should see:\n\nTo establish an SSH connection with your Raspberry Pi, enter the following command:\nssh pi@raspberrypi\nVideo\n\n\n\n\n\n\nNote\n\n\n\nIf you encounter any troubles with this section, please refer to the last section of this content, titled Issues of Initial Setup, for guidance and solutions."
  },
  {
    "objectID": "content/a22-initial.html#sec-way2",
    "href": "content/a22-initial.html#sec-way2",
    "title": "2  Initial Setup",
    "section": "2.4 Access Your Pi Using Your Phone as a Network Provider",
    "text": "2.4 Access Your Pi Using Your Phone as a Network Provider\n\n2.4.1 Set Up Your Mobile Hotspot\nEnable your mobile hotspot with the same settings you used when flashing the SD card:\n\n\n\n2.4.2 Power Up Your Pi\nInsert the prepared SD card into your Pi and plug in the power:\n\n\n\n2.4.3 Connect Your Laptop to Your Mobile Hotspot\nConfigure your laptop’s WiFi to connect to the mobile hotspot:\n\n\n\n2.4.4 Verify Connections in Your Mobile Hotspot Interface\nAfter waiting a few seconds, you should see two connected devices in your interface:\n1. raspberrypi: The Raspberry Pi - after waiting a few seconds, you should see the Raspberry Pi appear in your mobile hotspot interface.\n2. your laptop: Your laptop’s name, as it appears on the network.\n\n\n2.4.5 Access Your Pi via SSH\nFirst, open the Command Prompt. If you have installed the Windows Terminal from the Microsoft Store, you can access the Command Prompt by pressing Ctrl + R, typing cmd, and hitting Enter. Alternatively, you can open it by pressing Ctrl + Shift + P. You should see the following:\n\nNow, establish an SSH connection with your Raspberry Pi by entering this command:\nssh pi@raspberrypi\nVideo\n\n\n\n\n\n\nNote\n\n\n\nIf you encounter any troubles with this section, please refer to the last section of this content, titled Issues of Initial Setup, for guidance and solutions."
  },
  {
    "objectID": "content/a22-initial.html#verify-your-pis-internet-connectivity",
    "href": "content/a22-initial.html#verify-your-pis-internet-connectivity",
    "title": "2  Initial Setup",
    "section": "2.5 Verify Your Pi’s Internet Connectivity",
    "text": "2.5 Verify Your Pi’s Internet Connectivity\nTo confirm your Raspberry Pi’s internet connection, use the ping command followed by the IP address of a well-known site. For example, ping Google’s Public DNS Server by typing this command:\nping 8.8.8.8\nIf the Pi is connected to the internet, you will see lines starting with ‘64 bytes from 8.8.8.8’ and a summary of the ping at the end.\nVideo\nYou can stop the ping process by pressing Ctrl + C.\n\n\n\n\n\n\nNote\n\n\n\nIf you encounter any troubles with this section, please refer to the last section of this content, titled Issues of Initial Setup, for guidance and solutions."
  },
  {
    "objectID": "content/a22-initial.html#issues-of-initial-setup",
    "href": "content/a22-initial.html#issues-of-initial-setup",
    "title": "2  Initial Setup",
    "section": "2.6 Issues of initial setup",
    "text": "2.6 Issues of initial setup\n\n2.6.1 Connection and network error\nIf you encounter any errors accessing your Pi or the internet connectivity, please follow these steps:\n\nEnable and then disable the network on your laptop or desktop computer.\nCheck and uncheck the “Enable Internet Connection Sharing” function in your network settings.\nVerify the network connection made by your Pi through the Ethernet.\n\nVideo\n\n\n2.6.2 Locating Your Raspberry Pi’s IP Address using MAC Address\nIf you need to access your Pi with a specific IP address, especially when connected to multiple Pis, follow these guidelines:\n1. Open Command Prompt: Press the Windows key on your keyboard, type cmd and hit Enter.\n2. Execute the arp -a command: This command displays the IP and MAC addresses of devices on your network.\n3. Identify your Raspberry Pi: Raspberry Pi devices have MAC addresses that start with B8:27:EB:xx:xx:xx or DC:A6:32:xx:xx:xx. Find the device in the list with a physical address that starts with these characters - that’s your Raspberry Pi’s IP address.\nNote: These are the MAC address prefixes specific to Raspberry Pi Foundation devices. Your device’s MAC address may start with a different prefix.\nVideo\n\n\n2.6.3 ‘WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!’\nThis warning appears when the remote system has different identification than expected, such as after a system re-installation or SSH key change.\n\nYou can fix this error by removing the old key for the Raspberry Pi:\nssh-keygen -R raspberrypi\nAfterwards, try to re-establish the SSH connection.\n\n\n2.6.4 Using an Enhanced Security Network\nIf you’re on a network with higher security, you may need to register your Raspberry Pi’s MAC address. See the example below from a university network and consult with your network administrator or IT support for your specific procedures."
  },
  {
    "objectID": "content/a23-pisetup.html#prepare-your-raspberry-pi-os",
    "href": "content/a23-pisetup.html#prepare-your-raspberry-pi-os",
    "title": "3  Raspberry Pi Setup",
    "section": "3.1 Prepare Your Raspberry Pi OS",
    "text": "3.1 Prepare Your Raspberry Pi OS\n\n3.1.1 Update Your Pi\nStart by updating your Raspberry Pi’s operating system (OS) to its latest version. Open a terminal window and enter the following commands:\nsudo apt-get update -y && sudo apt-get upgrade -y\n\n\n\n\n\n\nHow to copy/paste in Linux terminal\n\n\n\n\n\nFor copy, you could click this icon to copy the command:\n\nFor paste, there are various ways; please visit this when Ctrl+V doesn’t work in the terminal.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn Linux systems, sudo stands for “superuser do”, similar to “Run As Administrator” in Windows. The -y flag automatically confirms any prompts during the update process. The apt-get update command refreshes the list of available packages and their versions, while apt-get upgrade installs the latest versions. You can learn basic Linux commands on websites like this.\n\n\nThe given command should be placed like this:\nVideo\nAfter the updates are complete, restart your Raspberry Pi using this command:\nsudo reboot\n\n\n3.1.2 Update Your Pi\nBefore starting any kind of system-wide transformation, it’s important to have the necessary administrative privileges. On Raspberry Pi, you can enter the superuser mode (or root mode) by using the command:\nsudo su"
  },
  {
    "objectID": "content/a23-pisetup.html#transforming-your-pi-into-a-file-server",
    "href": "content/a23-pisetup.html#transforming-your-pi-into-a-file-server",
    "title": "3  Raspberry Pi Setup",
    "section": "3.2 Transforming Your Pi into a File Server",
    "text": "3.2 Transforming Your Pi into a File Server\nThis process allows easy sharing of files between a Raspberry Pi and other devices, such as laptops and PCs. Samba, an open-source secure network file-sharing system, enables this transfer. By setting up Samba, files can be conveniently transferred to and from a laptop within your network to a Raspberry Pi, via a direct Ethernet connection.\n\n3.2.1 Install Samba\nEnter the following command in your terminal to install Samba:\nsudo apt-get install -y -q samba samba-common-bin\n\n\n\n3.2.2 Modify the Samba Config File\nTo share the Pi’s folder, modify the Samba config file using the following command:\nsudo nano /etc/samba/smb.conf\nMove to the end line by pressing Alt + / and add this:\n[share]\npath = /home/pi\nwriteable=Yes\ncreate mast=0777\ndirectory mast=0777\npublic=no\n\nPress Ctrl + X, then Y, followed by Enter to save the changes.\n\n\n3.2.3 Set Up a Samba User\nSet up a user for your Samba share on your Pi using this command:\nsudo smbpasswd -a pi\nThen, enter the password twice as prompted by the command. In this case, the password is raspberry.\n\n\n3.2.4 Restart Samba Services\nRestart the Samba services to apply the changes by typing this:\nsudo service smbd restart\nsudo service nmbd restart\n\n\n3.2.5 Access the Pi Directory\nOpen the File Explorer (press Win + E), type in the address raspberrypi/pi, then enter the Pi’s name and password as network credentials.\nVideo\n\n\n3.2.6 Create and Verify the Test File\nCreate a text file in your Pi’s directory using the following command.\nsudo nano test.txt\nAfter typing anything (e.g., ‘gg’) in the file, press Ctrl + x, then y, followed by Enter. You should then be able to see the file on your laptop.\nVideo"
  },
  {
    "objectID": "content/a23-pisetup.html#setting-up-cloud-storage-access-on-your-pi",
    "href": "content/a23-pisetup.html#setting-up-cloud-storage-access-on-your-pi",
    "title": "3  Raspberry Pi Setup",
    "section": "3.3 Setting Up Cloud Storage Access on Your Pi",
    "text": "3.3 Setting Up Cloud Storage Access on Your Pi\nThis step involves configuring your Raspberry Pi to send status data to your cloud storage. It’s essential to ensure that your Pi is properly set up before or during its installation. Typically, you might consider connecting a monitor, mouse, and keyboard to your Pi to check its status, but that’s not always practical or convenient.\nInstead, we recommend setting up your Pi to relay status updates - such as available storage space - to your chosen cloud storage. Once your Pi starts sending these updates, you can easily monitor its status by accessing and reviewing these files in the cloud storage. This method allows you to remotely track the setup progress and address any potential issues promptly.\n\n3.3.1 Create a Dropbox App\nIn this guide, we will be utilizing Dropbox as our cloud storage service. You need to first set up an app on Dropbox to interface with the service. Follow the steps below:\n\nNavigate to the Dropbox developer page.\nSign in or create an account if you haven’t done so already.\nOnce you’re logged in, proceed to create a new application.\n\n\n\n\n3.3.2 Modify the Permission\nConfigure your application to permit the viewing and management of files and folders. In this instance, we’ve selected all the available options in the permission settings (for the indivisual scope).\n\n\n\n3.3.3 Install the Necessary Packages\nSwitch to a superuser shell session by typing this command:\nsudo su\nMake sure that curl and git packages are installed on your Pi. You can do this by entering the following command:\nsudo apt install curl git -y\n\n\n3.3.4 Install the Dropbox Uploader\nDownload the Dropbox Uploader script onto your Pi using this command:\ngit clone https://github.com/andreafabrizi/Dropbox-Uploader.git\n\n\n3.3.5 Assign Execution Permission\nMove into the cloned directory and give the executable permission to the script by using these commands:\ncd Dropbox-Uploader\nsudo chmod +x dropbox_uploader.sh\n\n\n3.3.6 Validate App Permissions on Your Pi\nBegin the Dropbox Uploader configuration with the following command:\n./dropbox_uploader.sh\nEnter your app key and app secret in the terminal:\n\nCopy and paste the given URL into a web browser, then click ‘Continue’ and ‘Allow’ to authorize the permissions.\n\nCopy and paste the generated access code to the terminal.\n\n\n\n3.3.7 Verify Cloud Storage Access\nEmploy the upload function to transmit a ‘README.md’ file by executing this command:\n./dropbox_uploader.sh upload README.md /\nYou should be able to view the file that was sent by executing the command.\nVideo\nGo back to the home directory by executing the command:\ncd /home/pi"
  },
  {
    "objectID": "content/a24-software.html#getting-the-scripts",
    "href": "content/a24-software.html#getting-the-scripts",
    "title": "4  Sensing Setup",
    "section": "4.1 Getting the Scripts",
    "text": "4.1 Getting the Scripts\nBegin by fetching the scripts from the urban-sensing-raspi GitHub repository.\nEnsure you’re in the /home/pi directory. If not, navigate there using:\ncd /home/pi\nClone the repository with:\ngit clone https://github.com/jhyeonpark/urban-sensing-raspi.git\n\n\nRepository Overview\nThe repository structure is as follows:\n.\n├── service.sh\n├── name.sh\n├── envr.sh\n├── packages.sh\n├── code\n│   └── start.py\n└── README.md\n\npackages.sh: Handles updates, installations, and other setup tasks.\nname.sh: Allows users to set or confirm the unique sensor name.\nenvr.sh: Configures udev rules and prepares the Pi’s environment.\nservice.sh: Sets up the urban sensing service to launch on boot.\nstart.py: The main script for the Urban Sensing Service, located in ‘code/default’."
  },
  {
    "objectID": "content/a24-software.html#installing-required-packages",
    "href": "content/a24-software.html#installing-required-packages",
    "title": "4  Sensing Setup",
    "section": "4.2 Installing Required Packages",
    "text": "4.2 Installing Required Packages\nElevate privileges to a superuser session:\nsudo su\nNavigate to the repository:\ncd /home/pi/urban-sensing-raspi\nExecute the packages.sh script:\nbash packages.sh\nVideo"
  },
  {
    "objectID": "content/a24-software.html#setting-the-sensor-name",
    "href": "content/a24-software.html#setting-the-sensor-name",
    "title": "4  Sensing Setup",
    "section": "4.3 Setting the Sensor Name",
    "text": "4.3 Setting the Sensor Name\nFor organized data collection across multiple devices, it’s essential to assign a unique identifier to each sensor. This segment aids you in naming your Raspberry Pi sensor and integrating it into a Python script.\nNavigate to the repository:\ncd /home/pi/urban-sensing-raspi\nRun the name.sh script. If no name is provided, the default (raspberrypi) will be applied:\nbash name.sh\nPost this, the sensor name can be retrieved from the sensor_name.conf file for usage.\nVideo"
  },
  {
    "objectID": "content/a24-software.html#configuring-settings",
    "href": "content/a24-software.html#configuring-settings",
    "title": "4  Sensing Setup",
    "section": "4.4 Configuring Settings",
    "text": "4.4 Configuring Settings\nConfigure the Raspberry Pi to set its internal WiFi to wlan0. When you connect an external adapter, it will be assigned differently. To determine the MAC address of the internal WiFi, execute the following command:\nifconfig\nIn my setup, the WiFi with the MAC address b8:27:eb:0c:70:38 was assigned to wlan0, while the external adapter received a different assignment.\n\nNavigate to the repository:\ncd /home/pi/urban-sensing-raspi\nRun the envr.sh script:\nbash envr.sh\nThis script ensures consistent network interface naming with udev rules at boot.\nVideo"
  },
  {
    "objectID": "content/a25-imp.html#sensing-service-testing-in-controlled-environment",
    "href": "content/a25-imp.html#sensing-service-testing-in-controlled-environment",
    "title": "5  Implementation",
    "section": "5.1 Sensing Service Testing in Controlled Environment",
    "text": "5.1 Sensing Service Testing in Controlled Environment\n\n5.1.1 Raspberry Pi Setup\nBefore setting up, power off the Raspberry Pi. Once turned off, insert the additional WiFi adapter. Afterward, power the Raspberry Pi back on.\n\nAccess the Raspberry Pi via ssh and check the wlan interface to check the internal wifi set to be wlan0 by excueting this:\nifconfig\nEnsure that the wlan0 interface is correctly assigned. The internal interface should have a MAC address starting with b8:27:eb. Subsequent WiFi adapters should follow a sequence like wlan1, wlan2, and so on.\n\nIf the assignment isn’t correct, refer to Section 2.4 for the appropriate setup instructions.\n\n\n5.1.2 Script Execution\nEasily access the superuser shell with:\nsudo su\nInitiate the Urban Sensing code:\npython3 urban-sensing-raspi/code/start.py\nLet it run for about 2 minutes before halting it using Ctrl+C.\nVideo\n\n\n5.1.3 Customizing Your Sensing\nThe Urban Sensing Service isn’t just about standard WiFi data collection; it offers a broader scope:\n\nRetain Raw WiFi Packets : Use the -i option:\npython3 urban-sensing-raspi/code/start.py -i\nIntroduce Bluetooth Sensing : Add the -b option:\npython3 urban-sensing-raspi/code/start.py -b\nDiscover More Options : Read our the GitHub Repository."
  },
  {
    "objectID": "content/a25-imp.html#verifying-the-results",
    "href": "content/a25-imp.html#verifying-the-results",
    "title": "5  Implementation",
    "section": "5.2 Verifying the Results",
    "text": "5.2 Verifying the Results\n1. Access the Pi folder: type \\\\raspberrypi\\share on file explore.\n2. Look around ‘stats’ Folder :\n\nVerify that file names reflect the exact execution time.\nConfirm files have been transferred to Dropbox Storage.\n\nVideo\n3. ‘data’ Folder :\n\nIf you used -b, expect a Bluetooth file. Otherwise, it won’t appear.\nCheck for the creation of the WiFi packet file. To delve deeper, use DB Browser for SQLite.\n\nVideo"
  },
  {
    "objectID": "content/a25-imp.html#setting-up-sensing-service",
    "href": "content/a25-imp.html#setting-up-sensing-service",
    "title": "5  Implementation",
    "section": "5.3 Setting Up Sensing Service",
    "text": "5.3 Setting Up Sensing Service\nOnce you’ve validated the sensing outputs, you can finalize the settings to fit your objectives. Notably, this will allow your Raspberry Pi to initiate the sensing service upon booting up.\nExecute the following script:\nbash urban-sensing-raspi/service.sh\nFollow the on-screen prompts and ensure its proper functioning. Exit the status info using ctrl+c.\nVideo\n\n\n\n\n\n\nNote\n\n\n\nAfter running service.sh, your Raspberry Pi will start start.py on every boot. If you need to do tasks like file transfers, pause this service. The start.py has a 30-second delay at the start. If you stop the service within this time using systemctl stop sensing.service, the script won’t perform any actions.\nsudo systemctl stop sensing.service"
  },
  {
    "objectID": "content/a25-imp.html#sensing-service-testing-in-real-world-scenarios",
    "href": "content/a25-imp.html#sensing-service-testing-in-real-world-scenarios",
    "title": "5  Implementation",
    "section": "5.4 Sensing Service Testing in Real-world Scenarios",
    "text": "5.4 Sensing Service Testing in Real-world Scenarios\nIn this section, we’ll test the sensing service without Ethernet, simulating a real-world application. Follow these detailed steps for a successful setup and operation:\n\n5.4.1 Activate Mobile Hotspot\nActivate the hotspot on your mobile device. This is essential for providing internet connectivity to the Raspberry Pi, which will enable time synchronization and status updates via Dropbox.\n\n\n\n5.4.2 Connect the External Battery\nEnsure you’ve connected an external battery to power both your Raspberry Pi and the WiFi adapters.\n\n\n\n5.4.3 Monitor WiFi Adapter Activity\nCheck for indicator lights on the WiFi adapter. In station mode, when the adapter is networking, the lights should turn on. You should also see the Raspberry Pi appear on your mobile hotspot interface.\n\n\n\n\n\n\nNote\n\n\n\nIf the status lights remain off or the Raspberry Pi does not appear on your hotspot interface, there might be an issue with your adapter. Consider getting a replacement.\n\n\n\nObserve the WiFi adapter’s status lights. When networked (station mode), these should illuminate. Concurrently, you’ll see the Raspberry Pi connect to your mobile hotspot interface.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen accessing your Raspberry Pi via a mobile phone, the raspberrypi network might not disappear immediately. This is attributed to the wlan0 interface. A Python script will disconnect and turn off the wlan0 function approximately 3 minutes later.\n\n\n\n\n5.4.4 Validate Dropbox Connectivity\nOnce connected to the network with the correct Dropbox settings, you should start seeing files from your Raspberry Pi appear in your Dropbox.\n\n\n\n5.4.5 Check the WiFi adapter going on monitor mode\nIn monitor mode, the WiFi adapter’s status light should turn off, and its connection will vanish from your mobile hotspot interface.\n\n\n\n\n5.4.6 Wait for Sensing Operation\nThroughout the designated sensing duration, the service will capture packets.\n\n\n5.4.7 End Sensing Operation\nTo conclude the sensing operation, simply unplug the battery.\n\n\n5.4.8 Review Sensing Results\nUse Ethernet or your mobile phone hotspot to access and review the generated sensing results, as same to the controlled enviroment testing.\nVideo"
  }
]